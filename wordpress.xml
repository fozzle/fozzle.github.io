<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/3.5.1" created="2013-10-07 04:44" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>Kyle Petrovich</title>
	<link>http://kpetrovich.com</link>
	<description></description>
	<pubDate>Mon, 07 Oct 2013 04:44:39 +0000</pubDate>
	<language>en-US</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://kpetrovich.com</wp:base_site_url>
	<wp:base_blog_url>http://kpetrovich.com</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login>admin</wp:author_login><wp:author_email>kylepetrovich@gmail.com</wp:author_email><wp:author_display_name><![CDATA[Kyle]]></wp:author_display_name><wp:author_first_name><![CDATA[Kyle]]></wp:author_first_name><wp:author_last_name><![CDATA[Petrovich]]></wp:author_last_name></wp:author>


	<generator>http://wordpress.org/?v=3.5.1</generator>

	<item>
		<title>Asus F50SF Sound Crackle/Static with Windows 7 x64</title>
		<link>http://kpetrovich.com/2011/09/asus-f50sf-sound-cracklestatic-with-windows-7-x64/</link>
		<pubDate>Fri, 09 Sep 2011 23:09:33 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://kylepetrovich.wordpress.com/?p=5</guid>
		<description></description>
		<content:encoded><![CDATA[So every time I reinstall Windows 7 on my laptop, I have this horrible sound popping/crackle/static when I use the official drivers for my model. Even though I've ran through this about four times now, I always manage to forget the solution. No more! And if you are suffering from the same problem, then hopefully this will help you too.

After poring through forums, I came across this "beta" driver posted by a fellow over at<em> 7 Forums. </em>Greedily I downloaded and Â installed it...and now I have it! Pure, crisp, un-tarnished sound. Beautiful.

<a title="Turnoff Pullmode Drivers - Realtek" href="http://www.mediafire.com/?2dyiiwjzzji">Drivers</a>

&nbsp;

Here are my specs, if you share the same model and are having this issue, this post is for you.

<code>Asus F50SF
Windows 7 x64
4Gb Ram
Nvidia 220M
Core 2 Duo 2.53Ghz
</code>



I am not responsible for anything this may or may not do to your system, but if you are like me, you past the point of caring about that.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>5</wp:post_id>
		<wp:post_date>2011-09-09 23:09:33</wp:post_date>
		<wp:post_date_gmt>2011-09-09 23:09:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>asus-f50sf-sound-cracklestatic-with-windows-7-x64</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="64bit"><![CDATA[64bit]]></category>
		<category domain="post_tag" nicename="asus"><![CDATA[asus]]></category>
		<category domain="post_tag" nicename="crackle"><![CDATA[crackle]]></category>
		<category domain="post_tag" nicename="f50"><![CDATA[f50]]></category>
		<category domain="post_tag" nicename="f50sf"><![CDATA[f50sf]]></category>
		<category domain="post_tag" nicename="fix"><![CDATA[fix]]></category>
		<category domain="post_tag" nicename="popping"><![CDATA[popping]]></category>
		<category domain="post_tag" nicename="realtek"><![CDATA[realtek]]></category>
		<category domain="post_tag" nicename="solution"><![CDATA[solution]]></category>
		<category domain="post_tag" nicename="sound"><![CDATA[sound]]></category>
		<category domain="post_tag" nicename="static"><![CDATA[static]]></category>
		<category domain="category" nicename="windows"><![CDATA[Windows]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1315609774]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>5</wp:comment_id>
			<wp:comment_author><![CDATA[Cam]]></wp:comment_author>
			<wp:comment_author_email>speculaas3@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>75.14.217.101</wp:comment_author_IP>
			<wp:comment_date>2012-06-15 22:45:23</wp:comment_date>
			<wp:comment_date_gmt>2012-06-16 02:45:23</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[The drivers here got rid of the crackly audio on my F50SF in Windows 7 Ultimate x64, but made the microphone even more terrible than it already is. This is better than before but a functional mic would be nice. I had to seek this crackly audio fix for my laptop ages ago when I last reformatted it and had everything working just fine, but like you I can't remember what the hell I did! hopefully the drivers I used are still buried in a hard drive somewhere. Thanks for these drivers.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>6</wp:comment_id>
			<wp:comment_author><![CDATA[Kyle]]></wp:comment_author>
			<wp:comment_author_email>kylepetrovich@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://kpetrovich.com</wp:comment_author_url>
			<wp:comment_author_IP>24.99.29.112</wp:comment_author_IP>
			<wp:comment_date>2012-06-16 19:39:20</wp:comment_date>
			<wp:comment_date_gmt>2012-06-16 23:39:20</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I'm glad they helped you. Interesting point regarding your mic. I never ran into any mic issues myself with these drivers. If you do figure out what's going on or find better drivers please let me know!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>5</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Brother ESC/P Python Printing Library</title>
		<link>http://kpetrovich.com/2011/09/brother-escp-python-printing-library/</link>
		<pubDate>Mon, 19 Sep 2011 19:11:15 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://kylepetrovich.wordpress.com/?p=11</guid>
		<description></description>
		<content:encoded><![CDATA[<del>Recently wrote a little library of wrapper functions for use with the Brother QL series label printers when printing via serial port or network. Hopefully it will save someone else some time or at least make their code more understandable.</del>

<del>This employs the ESC/P printing language built into the printers, which can be used without installing any drivers. Just open up a socket, pass it into a new BrotherPrint object, and start sending text and formatting commands.

It basically just takes what would look like this:
<code>f_socket.send(minilabelbuzzfont)
f_socket.send(smallchemname+chr(10))
f_socket.send(chr(29)+chr(18)) # Enables double height.
f_socket.send(chr(14)) # Double width.
f_socket.send(storageLetter)
f_socket.send(chr(29)+chr(19)) # Cancels double height.
f_socket.send(chr(20)) # Cancels double width.
f_socket.send(minilabelcaption)
f_socket.send(chr(12)) # Eject mini-label.</code>

And turns it into something like this:
<code>
printJob.selectFont('sandiego')
printJob.charSize('48')
printJob.doubleWidth('on')
printJob.send(storageLetter)
printJob.doubleWidth('off')
printJob.send(minilabelcaption)
printJob.printPage()
</code>

</del>

<del>Like I said, trivial, but it is nice to have in comparison. You can find it on <a title="github" href="https://github.com/fozzle/brotherescpython">github.</a> Supports all ESC/P printing functions <em>except</em> bitmap image printing.</del>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>11</wp:post_id>
		<wp:post_date>2011-09-19 19:11:15</wp:post_date>
		<wp:post_date_gmt>2011-09-19 19:11:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>brother-escp-python-printing-library</wp:post_name>
		<wp:status>private</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="brother"><![CDATA[brother]]></category>
		<category domain="post_tag" nicename="django"><![CDATA[django]]></category>
		<category domain="post_tag" nicename="escp"><![CDATA[esc/p]]></category>
		<category domain="post_tag" nicename="label-printer"><![CDATA[label printer]]></category>
		<category domain="post_tag" nicename="library"><![CDATA[library]]></category>
		<category domain="post_tag" nicename="network-label-printing"><![CDATA[network label printing]]></category>
		<category domain="category" nicename="python"><![CDATA[Python]]></category>
		<category domain="post_tag" nicename="python-2"><![CDATA[python]]></category>
		<category domain="post_tag" nicename="ql"><![CDATA[ql]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>jabber_published</wp:meta_key>
			<wp:meta_value><![CDATA[1316459476]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Apache: Redirecting Entire Site to One Location</title>
		<link>http://kpetrovich.com/2012/02/apache-redirecting-entire-site-to-one-location/</link>
		<pubDate>Sun, 12 Feb 2012 20:06:57 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://kpetrovich.com/?p=57</guid>
		<description></description>
		<content:encoded><![CDATA[If you ever need to redirect an entire website to one location, you can either use mod_rewrite or this handy little line.

<pre>RedirectMatch 301 ^/ http://rainicorns.com</pre>

Just put this in a .htaccess file at the root level of your directory. All traffic will redirect to this single URL. Can be useful if you aren't interested in redirecting old locations to their new equivalents, and don't want your users to experience a bunch of 404s from old links.

Just note that if you want specific locations preserved. (http://dogbreathbiscuits.com/doglisting/ to go to http://rainicorns.com/doglisting/) you'll want a normal 301 redirect instead.

<pre>Redirect 301 / http://rainicorns.com</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>57</wp:post_id>
		<wp:post_date>2012-02-12 15:06:57</wp:post_date>
		<wp:post_date_gmt>2012-02-12 20:06:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>apache-redirecting-entire-site-to-one-location</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="apache"><![CDATA[Apache]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Gravitix Redesign in MelonJS</title>
		<link>http://kpetrovich.com/2012/02/gravitix-redesign-in-melonjs/</link>
		<pubDate>Sat, 25 Feb 2012 19:41:11 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://kpetrovich.com/?p=62</guid>
		<description></description>
		<content:encoded><![CDATA[I've been dabbling in game design recently. I've been working with C#/XNA to make a very basic platformer, just to learn the basics. I quickly realized that building a game engine from the ground up (or in this case, off a framework) was a bigger task than previously anticipated. With school, work, and other projects competing for time, I put it on the shelf.

Then, I stumbled upon the HTML5 game engine, <a href="http://melonjs.org">MelonJS</a>, the other day. I was pretty blown away by how easy it was to use. It integrates closely with <a href="http://www.mapeditor.org/">Tiled</a>, provides basic object entities, and a lot of other game-specific boilerplate. Not to mention, it's HTML5. That's hip, right?

I'm starting anew with the intent to resurrect a game a friend and I worked on back in middle school. When we were kids, we made all kinds of half-finished games using the drag-n-drop program GameMaker. We have the abandoned childhood websites to prove it!

<em>These should be good for a laugh. About the design...well...I plead innocence. I was 12.</em>
<a href="http://www.freewebs.com/biohazardgamestudios/">Biohazard Game Studios</a> - Our "companies" website. Notice under "games", none have been completed yet. I guess some things never change...until now!
<a href="http://rscarbhg.webs.com/">RscarBHG</a> - My mate's personal website. He kept toying around with GameMaker long after most of us stopped. He is actually the true creator of Gravitix.

<em>Note: You'll probably not be able to run any of these games unless you have WindowsXP or virtualize WindowsXP.</em>

Anyways, now that you've had a laugh at my childhood design sensibilities, more about Gravitix:

<a href="http://kpetrovich.com/wp-content/uploads/2012/02/gravitix1.png"><img class="alignnone  wp-image-64" title="Gravitix Screenshot 1" src="http://kpetrovich.com/wp-content/uploads/2012/02/gravitix1-300x225.png" alt="" width="210" height="158" /></a>Â <a href="http://kpetrovich.com/wp-content/uploads/2012/02/gravitix2.png"><img class="alignnone  wp-image-65" title="Gravitix Screenshot 2" src="http://kpetrovich.com/wp-content/uploads/2012/02/gravitix2-300x225.png" alt="Gravitix Screenshot 2" width="210" height="158" /></a>

You're basically a bouncing ball, and there are gravity changes, spikes, falling platforms, you know...the normal platform stuff. You just get through to the end of the level. It's a the most basic of basic, but even to this day I find it somewhat entertaining. I figured revisiting it with a sharpened skillset and a little more sense for good gameplay, this would be a fun project.

You can <a href="http://static.kpetrovich.com/gravitix/">track it's progress</a>, if you'd like. I'll try to upload after every major chunk is completed.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>62</wp:post_id>
		<wp:post_date>2012-02-25 14:41:11</wp:post_date>
		<wp:post_date_gmt>2012-02-25 19:41:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gravitix-redesign-in-melonjs</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="games"><![CDATA[Games]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Gravitix Progress 3/9/12</title>
		<link>http://kpetrovich.com/2012/03/gravitix-progress-3912/</link>
		<pubDate>Fri, 09 Mar 2012 19:07:12 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://kpetrovich.com/?p=71</guid>
		<description></description>
		<content:encoded><![CDATA[I have made a little bit of progress on Gravitix.

Added some gravity inversion, spikes, level changes. MelonJS and Tiled are great, can't recommend enough. It's nice to be able to dabble with something so quickly. It's got a LONG way to go, along with some serious tuning, but if you want to check out what it looks like head <a title="Gravitix" href="http://static.kpetrovich.com/gravitix">here</a>.

Schools been bearing down pretty hard, thus why I haven't gotten to far with it. My buddy who originally made this may be trying his hand at art assets, so maybe it won't look so silly next time. Thinking about taking it in a new direction gameplay wise, maybe with more realistic physics. Like if you fall from a tall height, you will bounce farther, etc. We'll see, just some ideas bouncing around in my head. Ha, bouncing. Get it? Ok I'm done.

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>71</wp:post_id>
		<wp:post_date>2012-03-09 14:07:12</wp:post_date>
		<wp:post_date_gmt>2012-03-09 19:07:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gravitix-progress-3912</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="games"><![CDATA[Games]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Whale Ebooks</title>
		<link>http://kpetrovich.com/2012/03/whale-ebooks/</link>
		<pubDate>Sun, 11 Mar 2012 00:36:00 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://kpetrovich.com/?p=77</guid>
		<description></description>
		<content:encoded><![CDATA[I made a <a href="http://twitter.com/horse_ebooks">horse_ebooks</a>-ripoff bot as a joke for my friend, who is taking a Moby Dick course this semester (Yea, an entire course dedicated to this one book...that surprised me).

It's a short little thing that navigates to a random place in the text ocean that is Moby Dick, snags the entire next line, chops off what it thinks is a sentence, and tweets it. Sometimes mildly amusing, most of the time just trash. I think it'd be funnier if I chopped up the lines even more...but as a bot that took less than ten minutes, I'm happy.

I swear, horse_ebooks <emp>has</emp> to have someone behind it. It's consistently too funny.

Anyways, <a href="http://twitter.com/whale_ebooks">thar she blows</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>77</wp:post_id>
		<wp:post_date>2012-03-10 19:36:00</wp:post_date>
		<wp:post_date_gmt>2012-03-11 00:36:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>whale-ebooks</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="bots"><![CDATA[Bots]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Haphazardly Planned Canada Trip 2012!</title>
		<link>http://kpetrovich.com/2012/03/haphazardly-planned-canada-trip-2012/</link>
		<pubDate>Sat, 17 Mar 2012 04:29:14 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://kpetrovich.com/?p=86</guid>
		<description></description>
		<content:encoded><![CDATA[Oh man, it's actually happening. We've got our passports ready, car tuned up, peace offerings purchased (6 pack of Laughing Skull amber ale). We are going to Canada! Got to make good on all the talk I've done about this trip, ha.

Our itinerary for now:
<ul>
	<li>3/17/12 - Wake up 4:30AM for a 5:00AM departure. Drive 16 hours to Toronto, Canada. Learning how to drive manual on the way.</li>
	<li>3/18/12 - Arrive at destination at 12-2 AM. Destination? Some guys apartment in downtown Toronto. We used Couchsurfer to reach out to some interesting people, one got back to us and we'll be arriving amidst some crazy art party. Sounds good to me! (If I don't pass out from exhaustion first).</li>
	<li>3/19/12 - Probably gonna check out Niagra Falls (obligatory), tool around Toronto. Gonna climb some rooftops with another Couchsurfer to get some sweet shots.</li>
	<li>3/20/12 - Science museum! CN Tower! More Toronto! Whatever is recommended by our host!</li>
	<li>3/21/12 - Going to drive out toÂ <a title="Algonquin Park" href="http://www.algonquinpark.on.ca/">Algonquin Park</a>Â or <a title="Killarney Park" href="http://www.ontarioparks.com/english/kill.html">Killarney Park</a>Â for a smidgen of camping and astrophotography.</li>
	<li>3/22/12 - Probably going to start driving back as soon as possible, depending on our physical or mental state.</li>
</ul>
I'll be keeping this blog updated with photos and interesting observations. For now though, gonna get what little sleep I can.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>86</wp:post_id>
		<wp:post_date>2012-03-17 00:29:14</wp:post_date>
		<wp:post_date_gmt>2012-03-17 04:29:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>haphazardly-planned-canada-trip-2012</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="travel"><![CDATA[Travel]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Canada, Oh Canada</title>
		<link>http://kpetrovich.com/2012/03/canada-oh-canada/</link>
		<pubDate>Mon, 19 Mar 2012 00:00:51 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://kpetrovich.com/?p=90</guid>
		<description></description>
		<content:encoded><![CDATA[Today was exhausting. I want to write this all down though. Especially as an outlet for expression because right now I can't even talk!

Arriving at the biggest and most intricate house party I've ever seen, we were denied sleep for quite some time. Not complaining though. There were people crammed in every nook and cranny, the living room was painted over and decorated as an underwater scene, and people were already pretty drunk (and coincidentally talkative and friendly). I got to make friends (and hopefully no enemies!) with some locals, Â and get my boogie on in the "Tsunami Room". We probably didn't crash until 3-4AM, but it was worth it!

[caption id="attachment_103" align="aligncenter" width="300" caption="The tsunami room, the pictures don&#39;t do it justice."]<a href="http://kpetrovich.com/wp-content/uploads/2012/03/underwater.jpg"><img class="size-medium wp-image-103" title="The Tsunami Room" src="http://kpetrovich.com/wp-content/uploads/2012/03/underwater-300x198.jpg" alt="The Tsunami Room" width="300" height="198" /></a>[/caption]

We set out at an early 10AM from our host's place, without any plan of action. "What do you want to do?" I asked my friend. "I don't know, let's just walk down this street." was the reply. So we walked down <a title="Yonge Street: Wikipedia" href="https://en.wikipedia.org/wiki/Yonge_Street">Yonge</a> (which is one of the longest streets in the world and also functions as a sort of "Main Street" of Ontario). Ended up getting some traditional Canadian Chipotle...and decided to bounce over to the CN Tower.

30 loons later we were up on the observation deck, towering over Toronto. It was pretty cool. The elevator ride has a window so you can see yourself elevate up 100+ stories. Also neat is the glass floor, which can be kind of freaky at first. To the horror of my friend (and probably those around me), I was jumping up and down on the glass to test it's strength. Hah.

[caption id="attachment_102" align="aligncenter" width="300" caption="Looking out over Toronto from the top of the CN Tower."]<a href="http://kpetrovich.com/wp-content/uploads/2012/03/cntower.jpg"><img class="size-medium wp-image-102" title="CN Tower" src="http://kpetrovich.com/wp-content/uploads/2012/03/cntower-300x198.jpg" alt="Looking out from the CN Tower" width="300" height="198" /></a>[/caption]

We then ended up walking through <a title="Chinatown, Toronto: Wikipedia" href="https://en.wikipedia.org/wiki/Chinatown,_Toronto">Chinatown</a>/<a title="Kensington Market: Wikipedia" href="https://en.wikipedia.org/wiki/Kensington_Market">Kensington Market</a>Â (on accident), which was really cool. At first, I was like "oh shit we are not in a good place", but I grew accustomed to it, and looking back it wasn't <em>that</em>Â sketchy. It kind of reminds me of Little Five points in Atlanta, it's old, there's a lot of bizarre shops, street bums, and young people. Â It seems to be the place to go for good food (or so the crowded cafe's and restaurants signaled to us). We'll probably be returning tomorrow.

Then we headed through University of Toronto to check out university life in Canada. It's an interesting campus, with some really old buildings coupled with some modern. Doesn't seem to be any running architectural motif, and it's fairly urban feeling, despite being it's own distinct entity. I think I prefer Tech's campus, personally. What was really cool though was visiting their<a title="University of Toronto Libraries: Wikipedia" href="https://en.wikipedia.org/wiki/University_of_Toronto_Libraries"> library</a>, which is the third largest in North America. It was so big! The building was really funky looking. Inside it was really nice, like if Tech's re-done bottom floors wereÂ propagatedÂ over 5 more stories. Â Actually, probably nicer.

Bounced over to Queen's Park to do some people watching, and now we're chilling at the Starbucks. Saw a shoplifter get tackled in the street. That was a bizarre thing to oversee, with no context. Just looked out the window and some guy is getting manhandled by another civilian (who was security), while all the people on Yonge just watch, confused as we were.

I hope my voice returns tomorrow. I don't think people can take anymore of my bad handwriting. Probably going to visit the Science Center, climb some rooftops, and...more Starbucks sitting. Yes, I am addicted to the Internet...and Tech left me with some nuggets of work to accomplish.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>90</wp:post_id>
		<wp:post_date>2012-03-18 20:00:51</wp:post_date>
		<wp:post_date_gmt>2012-03-19 00:00:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>canada-oh-canada</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="travel"><![CDATA[Travel]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Canada: I Drove Here to Eat Food</title>
		<link>http://kpetrovich.com/2012/03/canada-i-drove-here-to-eat-food/</link>
		<pubDate>Tue, 20 Mar 2012 03:33:35 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://kpetrovich.com/?p=95</guid>
		<description></description>
		<content:encoded><![CDATA[This title has summed up how I felt about today's Toronto adventure.

We woke up pretty late and got some breakfast at KOS in Kensington Market. Absolutely fantastic breakfast, and cheap!

[caption id="attachment_105" align="aligncenter" width="300" caption="Eating some quality breakfast at KOS."]<a href="http://kpetrovich.com/wp-content/uploads/2012/03/kos.jpg"><img class="size-medium wp-image-105" title="Eatin' at KOS" src="http://kpetrovich.com/wp-content/uploads/2012/03/kos-300x198.jpg" alt="Eatin' at KOS" width="300" height="198" /></a>[/caption]

We then took some time to further explore Kensington Market, because we mostly just skimmed through yesterday. It's a really neat place, I still feel like we could get more out of it. It's a good thing I can't get cash over here (ATMs don't accept my card, but I can still use the card for transactions...merp.), or else I'd have spent a fortune on cheap crap there. After tiring of Kensington, we walked around aimlessly some more, ate some more, people watched, ate more, walked aimlessly, ate more...you get the picture.

I told my friend "Yea, I guess we just came to Canada to eat...and to eat the same stuff we could eat at home." Ha. Even though that statement was pretty spot on regarding today, it was still fun. Just being somewhere new is a good change of pace.

[caption id="attachment_106" align="aligncenter" width="300" caption="Just hangin&#39; out in Yonge - Dundass Square."]<a href="http://kpetrovich.com/wp-content/uploads/2012/03/dundassquare.jpg"><img class="size-medium wp-image-106" title="Yonge - Dundass Square" src="http://kpetrovich.com/wp-content/uploads/2012/03/dundassquare-300x198.jpg" alt="Yonge - Dundass Square" width="300" height="198" /></a>[/caption]

We actually <em>do</em>Â have some plans tomorrow. Turns out the <a title="ROM: Wikipedia" href="https://en.wikipedia.org/wiki/Royal_Ontario_Museum">Royal Ontario Museum</a> is free for students on Tuesdays (hell yea), and we're going to hit up theÂ <a title="Distillery District: Wikipedia" href="https://en.wikipedia.org/wiki/Distillery_District">DistilleryÂ District</a>, because supposedly that's a pretty swanky place.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>95</wp:post_id>
		<wp:post_date>2012-03-19 23:33:35</wp:post_date>
		<wp:post_date_gmt>2012-03-20 03:33:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>canada-i-drove-here-to-eat-food</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="travel"><![CDATA[Travel]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Final Day in Toronto!</title>
		<link>http://kpetrovich.com/2012/03/final-day-in-toronto/</link>
		<pubDate>Wed, 21 Mar 2012 02:07:28 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://kpetrovich.com/?p=97</guid>
		<description></description>
		<content:encoded><![CDATA[Today was a great way to wrap up our journey to Toronto.

We started off going to the Royal Ontario Museum, which was <em>awesome</em>. Unfortunately we couldn't get in for free. We handed our Georgia Tech student IDs with a big grin, and the lady at the counter said "It's only free for <em>Canadian</em>Â students...". Well, crap. We put down 13 bones and went anyways though.Â It was so big! So many great things to see, with pieces from ancient civilizations all over the world, all kinds of animals in suspended animation, andÂ some sweet dinosaur exhibits (Wow, sauropods are <em>massive!)</em>. It was really tiring though, near the end of the 2+ hours we were in there, I was ready to get the hell out.

We exited, hungry and in search of sustenance. Our hosts told us the food trucks by the city hall had some mean <a title="Poutine: Wikipedia" href="https://en.wikipedia.org/wiki/Poutine">poutine</a>. It was indeed delicious, though after finishing mine and some of my friends...I think I shortened my life by a few days. Ha.

We ambled over to the Distillery District...which was cool, aesthetically, but kind of boring overall. Meh. At least I can say we did it. I liked the art that was dispersed around there, it was creepy...in a good way.

I think we're going out for drinks with our host, if he gets his paper done in time. I'm going to miss this place, and all the people I've met here. Hopefully I'll see them again someday. <a title="Couchsurfing" href="http://couchsurfing.org">Couchsurfing</a> is really the way to go if you're anÂ adventurousÂ traveler. The experiences you gain by living in "another's shoes" or rather "another's couch" is trulyÂ irreplaceable.

Tomorrow: <a title="Mew Lake" href="http://www.algonquinpark.on.ca/visit/camping/mew-lake-campground.php">Mew Lake</a>! Learning to drive manual! Astrophotography!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>97</wp:post_id>
		<wp:post_date>2012-03-20 22:07:28</wp:post_date>
		<wp:post_date_gmt>2012-03-21 02:07:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>final-day-in-toronto</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="travel"><![CDATA[Travel]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Quick DIY Project: Atari Clock</title>
		<link>http://kpetrovich.com/?p=134</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://kpetrovich.com/?p=134</guid>
		<description></description>
		<content:encoded><![CDATA[I saw these neat Atari cartridge clocks on <a href="http://www.etsy.com/shop/GrandWazoo?section_id=8043827">Etsy</a>Â the other day. I wanted one, but they were kind of steep at twenty two bucks a pop.

No matter, I figured, I could make it myself. It was really easy and only took around thirty minutes.

[caption id="attachment_135" align="alignleft" width="300" caption="This was the first go, most of it done without my rotary tool. It&#39;ll look a lot cleaner with a rotary tool!"]<a href="http://kpetrovich.com/wp-content/uploads/2012/04/DSCF1763.jpg"><img class="size-medium wp-image-135" title="Atari Clock" src="http://kpetrovich.com/wp-content/uploads/2012/04/DSCF1763-300x225.jpg" alt="Atari Clock" width="300" height="225" /></a>[/caption]

&nbsp;

&nbsp;

&nbsp;

&nbsp;

&nbsp;

&nbsp;

&nbsp;

&nbsp;

&nbsp;

&nbsp;

You'll need the following tools and supplies:
<ul>
	<li>Atari Cartridge - You can find these at thrift stores or flea markets for a dollar. Try and get one with the art intact, it'll look better.</li>
	<li>Clock Movement - I just used some generic one I found on Amazon. Get one that is thin enough to fit within the cartridge, I think it looks a lot better that way. For reference, the Atari cartridge is aboutÂ 97mm x 81mm x 20mm.</li>
	<li>Hot Glue Gun - You may actually not need this, because the fit can be so tight as to secure the clock by force alone, but just in case.</li>
	<li>(Optional, but nice!) Rotary Tool - You can scrape out the soft plastic yourself, but it will be 10x easier with a decent rotary tool. Also, it will look a lot cleaner that way.</li>
</ul>
<strong>Step 1: Opening the Cartridge</strong>

Opening the Atari Cartridge is easy. There's a screw you're going to have to remove that keeps the cartridge together. You can feel for it with your hands and then insert a phillips head screwdriver and take it out. Otherwise, if you're interested in keeping the label pristine, use a hair dryer to remove the label, then attack the screw.

With the screw removed, simply pry the two halves apart. Take your time, squeezing the front while trying toÂ separateÂ them. Don't worry about breaking it so much though, they are durable and you'll have to use <em>some </em>force to get them apart.

Next remove the actual chip, along with the spring and the door. We're ready to grind out the insides.

<strong>Step 2: Preparing the Insides</strong>

Now that you have your cart open, whip out your rotary tool (or some pliers failing that). You'll want to grind down (or pull out, with pliers) all the plastic inside except for the shell of the case itself. This is necessary to fit the movement inside, as it just barely fits. Once you've grinded everything out, it should look like this.

&nbsp;

&nbsp;

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>134</wp:post_id>
		<wp:post_date>2012-05-14 15:54:36</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="atari"><![CDATA[atari]]></category>
		<category domain="post_tag" nicename="cartridge"><![CDATA[cartridge]]></category>
		<category domain="post_tag" nicename="clock"><![CDATA[clock]]></category>
		<category domain="category" nicename="diy"><![CDATA[DIY]]></category>
		<category domain="post_tag" nicename="diy-2"><![CDATA[diy]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Decision Making in Video Games</title>
		<link>http://kpetrovich.com/?p=138</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://kpetrovich.com/?p=138</guid>
		<description></description>
		<content:encoded><![CDATA[I just finished Mass Effect 3, and like everyone else, I was appalled at the endings that were offered. Without trying to give away too much, let's just say that all those decisions you made throughout this three game saga boiled down to nothing. Absolutely infuriating. This got me thinking of how choices we make in games today affect how narratives unfold. Lot's of games tout "moral" choices that create a choose-your-own-destiny illusion, but most of them end up being black and white decisions with only a few possible resolutions. Some opt for Fallout 3 style endings where you get cookie cutter inserts on the last cutscene depending on what you did. All of this is underwhelming. I would like to see <strong>substantially</strong>Â different endings in a modern game. Where the story is truly different depending on what you choose.

I understand that you can't make a different ending for every permutation. If you think about the all the decisions you make in a game like Mass Effect 3, the amount of unique endings would be unreasonably large. Every time you give a player <strong>X</strong> amount of choices, the amount of endings you would have to cover would increase <strong>X</strong>-fold. However, to boil all those down to one or two major decisions as many games have previously done is just insulting.Â It'd be nice to find a game with a middle ground, a sizable subset of major decisions, where every permutation has a <strong>real</strong> impact on how your story progresses and ends. It'd definitely be a pain to create, but imagine theÂ replay-ability, the amount of fervent discussion it would spark!

To really make this compelling though, developers need to break away from the good/evil decision rut. The usual black and white choices players are offered are completely stale. Want the best ending? Better be choosing all good or all evil! How about some choices where there is no wrong and right? Ambiguous decisions that will echo far into the narrative, influencing how things progress in unexpected ways.

&nbsp;

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>138</wp:post_id>
		<wp:post_date>2012-05-15 07:11:12</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="choice"><![CDATA[choice]]></category>
		<category domain="post_tag" nicename="decisions"><![CDATA[decisions]]></category>
		<category domain="category" nicename="games"><![CDATA[Games]]></category>
		<category domain="post_tag" nicename="games-2"><![CDATA[games]]></category>
		<category domain="post_tag" nicename="videogames"><![CDATA[videogames]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Django: Making the DateTimeField Default to Now</title>
		<link>http://kpetrovich.com/2012/05/django-making-the-datetimefield-default-to-now/</link>
		<pubDate>Wed, 23 May 2012 20:58:53 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://kpetrovich.com/?p=145</guid>
		<description></description>
		<content:encoded><![CDATA[If you've ever needed to make a DatetimeField to default to a current datetime value, but with the option to adjust it, you should do this:
<blockquote>
<pre class="lang:python decode:true">models.DateTimeField(default=datetime.now)</pre>
</blockquote>
Notice how we didn't call the function datetime.now().

Here you are actually passing in the function datetime.now itself, instead of evaluating the function with datetime.now() and making the default the result of that when the model is instantiated. Otherwise, you'll get a static datetime object as your default. This way it will be re-evaluated every time with the correct value.

If you need to do any arithmetic on the date, you can use a lambda function:
<blockquote>
<pre class="lang:python decode:true">models.DateTimeField(default=lambda: datetime.now() + timedelta(days=3))</pre>
</blockquote>
Likewise we are passing in a function to be re-evaluated every time.

Of course, it goes without saying if you want it to <em>always</em>Â be now, you can use :
<blockquote>
<pre class="lang:python decode:true">models.DateTimeField(auto_now_add=True)</pre>
</blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>145</wp:post_id>
		<wp:post_date>2012-05-23 16:58:53</wp:post_date>
		<wp:post_date_gmt>2012-05-23 20:58:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>django-making-the-datetimefield-default-to-now</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="django-python"><![CDATA[Django]]></category>
		<category domain="category" nicename="python"><![CDATA[Python]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Exim4: Forward Bounce Emails to Postmaster, Nonlocal Sender</title>
		<link>http://kpetrovich.com/2012/05/exim4-forward-bounce-emails-to-postmaster-nonlocal-sender/</link>
		<pubDate>Fri, 25 May 2012 16:45:04 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://kpetrovich.com/?p=150</guid>
		<description></description>
		<content:encoded><![CDATA[At work our users send a lot of mass mailings through our system. When we send it, we make the from header their email so other users can reply directly to the appropriate person. However, due to some erroneous emails, users sending messages complained of bouncebacks clogging up their inboxes.

We decided to route all bounceback emails to the postmaster email. Took a bit to track down exactly what I was supposed to do, but eventually I founderrors_to.

In the <strong>routers</strong> section, under the <strong>dnslookup</strong> router, add this line.
<pre class="lang:default decode:true crayon-selected">errors_to = postmaster@oursite.com</pre>
That's it!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>150</wp:post_id>
		<wp:post_date>2012-05-25 12:45:04</wp:post_date>
		<wp:post_date_gmt>2012-05-25 16:45:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>exim4-forward-bounce-emails-to-postmaster-nonlocal-sender</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="admin"><![CDATA[Admin]]></category>
		<category domain="category" nicename="exim"><![CDATA[Exim]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>9</wp:comment_id>
			<wp:comment_author><![CDATA[Kyle]]></wp:comment_author>
			<wp:comment_author_email>kylepetrovich@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://kpetrovich.com</wp:comment_author_url>
			<wp:comment_author_IP>130.207.155.223</wp:comment_author_IP>
			<wp:comment_date>2012-06-21 14:26:21</wp:comment_date>
			<wp:comment_date_gmt>2012-06-21 18:26:21</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Exim4 is set to use one of two configuration modes. The all-in-one config file or the split configuration. If you're using the all-in-one, it's in exim4.conf.template in /etc/exim4. 

Otherwise, it <em>should</em> be in /etc/exim4/conf.d/router/200_exim4-config_primary. Of course, depending on your installation and current settings YMMV.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>7</wp:comment_id>
			<wp:comment_author><![CDATA[Michael Ward]]></wp:comment_author>
			<wp:comment_author_email>mward@rmminc.org</wp:comment_author_email>
			<wp:comment_author_url>http://www.rmminc.org</wp:comment_author_url>
			<wp:comment_author_IP>184.4.91.138</wp:comment_author_IP>
			<wp:comment_date>2012-06-18 06:42:49</wp:comment_date>
			<wp:comment_date_gmt>2012-06-18 10:42:49</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Can you please tell me what file you are talking about when you say add "errors_to = postmaster@rmminc.org" In the routers section, under the dnslookup router.

Thank you very much for your help in advance.


Sincerely Yours,
Michael Ted Ward
President
Removing Mountains Ministries, Inc.    
119 Gatling Street
Suite 12
Williamston, NC 27892
(919) 526-6961
(888) 330-6635 Fax

Removing Mountains Ministries, Inc. is a registered tax exempt organization under section 501( c )3 of the Internal Revenue Code. All donations are tax deductible upto 50% of your gross income. Please support us in our effects to eliminate poverty in the lives of children in America. You can donate online at Https://www.rmminc.org/donate-online/]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Scribd Fruit Bot Competition</title>
		<link>http://kpetrovich.com/2012/05/scribd-fruit-bot-competition/</link>
		<pubDate>Fri, 25 May 2012 20:31:22 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://kpetrovich.com/?p=154</guid>
		<description></description>
		<content:encoded><![CDATA[I saw on hacker news today that ScribD created a little <a title="botrace" href="http://www.scribd.com/jobs/botrace">coding game </a>where you pit a bot against others, racing to collect the most fruit in the most categories. Too fun to pass up!

[caption id="attachment_155" align="alignleft" width="300" caption="This is not accurate (only 5 games) but it did make me swell with pride for my little Hodor."]<a href="http://kpetrovich.com/wp-content/uploads/2012/05/humblehodor.jpg"><img class="size-medium wp-image-155" title="humblehodor" src="http://kpetrovich.com/wp-content/uploads/2012/05/humblehodor-300x192.jpg" alt="" width="300" height="192" /></a>[/caption]

&nbsp;

I had a good time creatingÂ <a title="humble hodor" href="http://www.scribd.com/jobs/botrace_bot/215">Humble Hodor</a>, though I didn't get quite as fancy as some of the competitors, my bots seem solid. Humble Hodor won his first 5 matches, which is neat. May he continue to mercilessly pillage all the fruit ScribD has to offer!

&nbsp;

&nbsp;

&nbsp;

&nbsp;

&nbsp;

EDIT: Now my bot is getting trashed. Back to the drawing board!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>154</wp:post_id>
		<wp:post_date>2012-05-25 16:31:22</wp:post_date>
		<wp:post_date_gmt>2012-05-25 20:31:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>scribd-fruit-bot-competition</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="bots"><![CDATA[Bots]]></category>
		<category domain="category" nicename="games"><![CDATA[Games]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Django: Access Trac from Your Webapp Using XML-RPC</title>
		<link>http://kpetrovich.com/2012/05/django-access-trac-from-your-webapp/</link>
		<pubDate>Thu, 31 May 2012 19:02:41 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://kpetrovich.com/?p=163</guid>
		<description></description>
		<content:encoded><![CDATA[At work, we recently decided to open up our ticket system to the staff. This way they could directly submit tickets for us to edit, and view tickets that have been submitted. This is more in line with how most devs seem to use ticketing systems anyway.

However, using trac's default web interface is pretty awful in my opinion. We created a custom interface that seamlessly integrates with our application, so no-one even notices it's aÂ separateÂ system. Since the XML-RPC plugin was already installed on trac and Python has a built in XML-RPC library, I decided to use that as the method of communication between our application and trac. Here's an example of how to grab ticket details:

1.) Make sure you have the <a title="XML RPC Plugin" href="http://trac-hacks.org/wiki/XmlRpcPlugin">XML-RPC</a> plugin installed on Trac.

2.) Make a dummy user with XML-RPC permissions or enable XML-RPC for anonymous users.

3.) Example code:
<pre class="lang:python decode:true">import xmlrpclib

server = xmlrpclib.ServerProxy('https://USER:PASS@TRAC_LOCATION/login/xmlrpc')

# You can put any valid Trac ticket query here, max=0 returns every ticket
# Note this returns only ticket ID's
tickets = server.ticket.query('max=0')

# Multicall is used to reduce requests, combines into one POST
multicall = xmlrpclib.MultiCall(server)

for ticket in tickets:
    multicall.ticket.get(ticket)

for ticket in multicall():
    # At this point 'ticket' is a list. At index 0 is the ticket ID, followed by the created timestamp,
    # then the last modified timestamp, and finally a dictionary of the ticket's attributes.
    # Do with them what you will :)</pre>
I wouldn't run this kind of query if you have a lot of tickets though, this is just an example!

A quick note to this, if you're trying to access these dates to perform operations on or output using Django's <a href="https://docs.djangoproject.com/en/dev/ref/templates/builtins/?from=olddocs#date">date</a> template filter, you'll want to change them from <a href="http://docs.python.org/c-api/datetime.html">DateTime</a> instances to datetime instances. I don't know if this is the "best" way, but I couldn't find anything else and this worked nicely. If you know of something more straightforward, let me know!
<pre class="lang:python decode:true" title="Changing DateTime to datetime">from datetime import datetime

correct_datetime_instance = datetime.strptime(str(incorrect_datetime_instance), '%Y%m%dT%H:%M:%S')</pre>
And as one last example, here's how we did ticket submission.
<pre class="lang:python decode:true" title="Creating a new Trac Ticket"> form = TicketSubmitForm()

    # Connect to trac server.
    server = xmlrpclib.ServerProxy('https://USER:PASS@TRAC_LOCATION/login/xmlrpc')

    if request.method == 'POST':
        form = TicketSubmitForm(request.POST)

        if form.is_valid():
            user = request.user
            subject = form.cleaned_data['subject']
            description = form.cleaned_data['description']
            system = form.cleaned_data['system']

            # Create a ticket.
            ticket_number = server.ticket.create("Webform Ticket: {subject}".format(subject=subject),
                                                 "From {user}&lt;{username}&gt;: \n\n{description}".format(description=description,
                                                                                                     user=user.get_full_name(),
                                                                                                     username=user.username),
                                                 {'component': system, 'type': 'task'})</pre>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>163</wp:post_id>
		<wp:post_date>2012-05-31 15:02:41</wp:post_date>
		<wp:post_date_gmt>2012-05-31 19:02:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>django-access-trac-from-your-webapp</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="django-python"><![CDATA[Django]]></category>
		<category domain="category" nicename="python"><![CDATA[Python]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>RHOKATL June 2012 Entry: I Wish This Was, Where? Takes 1st Place!</title>
		<link>http://kpetrovich.com/2012/06/rhokatl-june-2012-entry-i-wish-this-was-where-takes-1st-place/</link>
		<pubDate>Sun, 03 Jun 2012 20:46:13 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://kpetrovich.com/?p=178</guid>
		<description></description>
		<content:encoded><![CDATA[So I attended RHOK Atlanta this weekend (in fact, writing this there now!), my first hack-a-thon in...oh about 2 years. Also, the first hack-a-thon where I felt I could actually <strong>contribute</strong>Â and be useful. I think I just bummed free food last time...

Our entry was <a title="I Wish this Was Where?" href="http://iwishthiswaswhere.herokuapp.com">I Wish This Was, Where?Â </a>, an idea piggybacking onÂ artist Candy Chang's <a title="I Wish This Was" href="http://iwishthiswas.cc">I Wish This Was</a> public art project that invites residents to provide civic input on-site.Â Surprisingly, it won first place. With so many fantastic applications presented we were all shocked!

I worked in conjuction with Jeff Walters, David Emory and Mathilde Piard. David gave us the design, Jeff created a prototype mobile app, and Mathilde was the one bringing the ideas and contacting the people in charge of the project.Â I was in charge of making the website backend, maps frontend, and deployment.

The way it works is that every hour or so the site crawls Instagram and Flickr, looking for images with the tag #Iwishthiswas. If they're new and geotagged, they're added to the database. When a user visits the site, it centers on their location and displays tags in the area. If they click on tags they are presented with a thumbnail and description.

Future ideas for the site include being able to comment and upvote project ideas, possibly links to related Kickstarters, etc.

All in all an extremely simple but effective little site. I got to learn Heroku which was super cool (and frustrating, at times), met some really great people, and had a lot of fun.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>178</wp:post_id>
		<wp:post_date>2012-06-03 16:46:13</wp:post_date>
		<wp:post_date_gmt>2012-06-03 20:46:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rhokatl-june-2012-entry-i-wish-this-was-where-takes-1st-place</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="diy"><![CDATA[DIY]]></category>
		<category domain="category" nicename="django-python"><![CDATA[Django]]></category>
		<category domain="category" nicename="python"><![CDATA[Python]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Serving Files Controlled by Django with NginX</title>
		<link>http://kpetrovich.com/2012/06/serving-files-controlled-by-django-with-nginx/</link>
		<pubDate>Thu, 21 Jun 2012 18:20:20 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://kpetrovich.com/?p=182</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>The following post is related to a Nginx/Apache2/Django stack as described <a title="Lincoln Loop Best Practices" href="http://lincolnloop.com/django-best-practices/deployment/servers.html">in this article...</a></strong>

If you ever need to serve files, of course you shouldn't use Django to do it! It's common knowledge on how to setup static files with Nginx, but what about if you would offer file downloads that are access controlled by Django? (In my case, I had network shares that were required to be accessible from the Django application to serve to users, but still hidden from the world.)

Well it's easy with <a title="Django-sendfile" href="https://github.com/johnsensible/django-sendfile">django-sendfile</a>Â and Nginx!

What you are basically doing is taking advantage of Nginx's "<a title="XSendfile" href="http://wiki.nginx.org/XSendfile">X-Accel-Redirect</a>" which is similar to lighthttpd's X-Sendfile and Apache2's mod_xsendfile. The library just abstracts the work a little bit, and makes it easy to drop in backends for different environments.

First install django-sendfile and create all the views you need, etc. It's very straightforward to use and sufficiently documented.

Then just add the following to the proper sites-available file in nginx:
<pre class="lang:default decode:true" title="Nginx Config">location /files {
	alias /path/to/files;
	internal;
}</pre>
Which will serve the URIÂ /files<strong>/goop/foo.jpg </strong>the fileÂ <strong>/path/to/files/goop/foo.jpgÂ </strong>or you can use:
<pre class="lang:default decode:true">location /files {
	root /path/to/files;
	internal;
}</pre>
Which will serve the URI /<strong>files/goop/foo.jpgÂ </strong>the fileÂ /path/to/files/files/goop/foo.jpg

Since this rule isÂ <strong>internal</strong> it will not respond to any other request but from your Django application. Upon receiving the X-Accel-Redirect header from the Django app it coughs up the file, sidestepping Django and keeping things snappy.

Now you can control downloads served through Nginx with Django!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>182</wp:post_id>
		<wp:post_date>2012-06-21 14:20:20</wp:post_date>
		<wp:post_date_gmt>2012-06-21 18:20:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>serving-files-controlled-by-django-with-nginx</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="admin"><![CDATA[Admin]]></category>
		<category domain="category" nicename="django-python"><![CDATA[Django]]></category>
		<category domain="category" nicename="nginx"><![CDATA[Nginx]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Lei Hao From Hong Kong</title>
		<link>http://kpetrovich.com/2012/10/lei-hao-from-hong-kong/</link>
		<pubDate>Wed, 17 Oct 2012 15:00:26 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://kpetrovich.com/?p=190</guid>
		<description></description>
		<content:encoded><![CDATA[It's been a while since I've made a post, but I have a good reason. It's because I'm currently on exchange in Hong Kong at the <a title="HKUST" href="http://ust.hk">Hong Kong University of Science and Technology</a>, and busier than ever! Hong Kong has been a fantastic experience thus far. I've met a ton of new people, tried plenty of new food, and have been exploring the region as much as possible.

[caption id="attachment_192" align="aligncenter" width="300"]<a href="http://kpetrovich.com/wp-content/uploads/2012/10/DSCF1773.jpg"><img class="size-medium wp-image-192" title="View from My Dorm" src="http://kpetrovich.com/wp-content/uploads/2012/10/DSCF1773-300x225.jpg" alt="View from My Dorm" width="300" height="225" /></a> This is the view from my dorm room, no joke.[/caption]

[caption id="attachment_193" align="aligncenter" width="300"]<a href="http://kpetrovich.com/wp-content/uploads/2012/10/IMG_0053.jpg"><img class="size-medium wp-image-193" title="TST Starwalk" src="http://kpetrovich.com/wp-content/uploads/2012/10/IMG_0053-300x225.jpg" alt="Me on the TST Starwalk" width="300" height="225" /></a> At the TST starwalk[/caption]

[caption id="attachment_194" align="aligncenter" width="200"]<a href="http://kpetrovich.com/wp-content/uploads/2012/10/sweetpic.jpg"><img class="size-medium wp-image-194" title="Hikin" src="http://kpetrovich.com/wp-content/uploads/2012/10/sweetpic-200x300.jpg" alt="Hiking in Saikung" width="200" height="300" /></a> Hiking in the beautiful Sai Kung area![/caption]
<p style="text-align: left;">Â I could go on but I think you get the idea: I'm having a blast.</p>
<p style="text-align: left;">Between classes, sightseeing, and sleep, I'm plinking away at <a title="Wrektranet 2.0" href="http://github.com/wrekatlanta/wrektranet">Wrektranet 2.0</a>Â along with my buddy <a href="http://patrickstoica.com">Patrick Stoica</a>. It's a new web application intended to replace the spaghetti-code, patch-work intranet (wrektranet!) Â for our beloved college radio station <a title="WREK" href="http://wrek.org">WREK</a>. We inherited the project from Highgroove Studios, who gave us a large platform to start with (thanks guys!). We're hoping to be able to replace all the general management functions, and time willing we may even look into upsurping Audiovault, our automation program. Hey, we can dream, right?</p>
This marks my first foray into Ruby/RoR development, and I have so much to learn. Luckily there are similarities between Django and RoR which has made the learning a lot quicker. Here are my first impressions.

<strong>(Warning shallow opinions below)</strong>

I like:
<ul>
	<li>Migrations built in (no need for South)</li>
	<li>Large gem ecosystem</li>
	<li>Creating basic CRUD functionality for models is brainless</li>
	<li>Rake!</li>
</ul>
<div>I don't like:</div>
<div>
<ul>
	<li>Too much "magic" for my taste. I actually enjoy Django's verbosity. Even the imports.</li>
	<li>Ruby'sÂ <em>TMTOWTDIÂ </em>(There's more than one way to do it...) philosophy seems to justÂ unnecessarilyÂ complicate things, but to be fair, this is coming from a guy who's been using Python for the last 2 years. Of course we are using a style guide, but even still,Â <em>why?</em></li>
</ul>
<div>Hopefully I can make someÂ sizableÂ contributions even while I'm here.</div>
</div>
<div></div>
<div>That's all for my little "life update". Have to resuscitateÂ the blog every once in a while, you know!</div>
PS: No-one really uses "lei hao" in Hong Kong they just say "hello", but that wouldn't be as fun of a title, so yea.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>190</wp:post_id>
		<wp:post_date>2012-10-17 11:00:26</wp:post_date>
		<wp:post_date_gmt>2012-10-17 15:00:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>lei-hao-from-hong-kong</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="travel"><![CDATA[Travel]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Communication Between Client Side JS and WSO2 API Manager - Difficulties</title>
		<link>http://kpetrovich.com/?p=272</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://kpetrovich.com/?p=272</guid>
		<description></description>
		<content:encoded><![CDATA[I was exploring using client side Javascript to communicate with services controlled by the WSO2 API manager we are using. I figured it could be neat to easily drop in access to APIs exposed by the gateway. Ahead of time, I knew cross-domain request browser security would have to be dealt with. Unfortunately, unless the Javascript is executing on a page with the same domain as the manager, this will be a problem.

First I tried the old hack, JSONP, in order to get around the cross domain request. Unfortunately this won't do for any semblance of authentication, due to the fact that because JSONP inserts a script tag, you can't control the headers that go along with it. So that means, no authentication bearer headers like you would need in WSO2's OAuth.

Next I looked into <a title="Cors" href="http://enable-cors.org/">Cross Origin Resource Sharing, or CORS</a>. CORS implementation requires that the server answering the request provide certain headers in return. The <i>Access-Control-Allow-OriginÂ </i>must be returned in the response. WSO2 could possibly be modified to send this along, but it doesn't seem like there's a supported option for it.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>272</wp:post_id>
		<wp:post_date>2013-04-17 14:33:39</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Scala Observations - Part 1</title>
		<link>http://kpetrovich.com/2013/02/scala-observations-part-1/</link>
		<pubDate>Mon, 18 Feb 2013 23:17:18 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://kpetrovich.com/?p=208</guid>
		<description></description>
		<content:encoded><![CDATA[At my new workplace we will be using Scala with Play. I've never used Scala before so I'm taking some time to get familiar with the language. I'm working through the book "Scala for the Impatient", here's some various notes and snippets of what I've learned from the first handful of chapters.
<ul>
	<li>Scala has values and variables. Values are immutable, variables aren't.</li>
	<li>You can delay evaluation of variables by putting in theÂ <em>lazy</em> keyword beforehand. They will be evaluated upon first use.</li>
	<li>You typically don't want to useÂ <em>return</em> in Scala because if youÂ <em>return</em> in an anonymous function, you will break out of the caller. The last evaluation will be returned by default.</li>
	<li>Arrays and maps work about how you'd expect they do. Except you access things with () and not [].</li>
	<li>
<pre class="lang:default decode:true">def countOccurencesSorted(input:String)= {
    val in = new Scanner(input)
    var count = scala.collection.immutable.SortedMap[String,Int]()
    while (in.hasNext()) {
      val key = in.next()
      count = count + (key -&gt; (count.getOrElse(key, 0) + 1))
    }
    count
  }</pre>
</li>
	<li>If you don't haveÂ <strong>function =<em>Â </em></strong>it will return theÂ <em>Unit</em>Â type which is the equivalent of void in Java.</li>
	<li>
<pre class="lang:java decode:true" title="function">def foo(input:String) = {
  input * 10
}</pre>
</li>
	<li>You usually don't need to declare the return type of a function, it will be inferred. However, if you plan on using the function recursively you have to define it or else the compiler will not know whether it's valid or not.</li>
	<li>Declaring type in Scala is kind of strange...the type comes after the variable name, likeÂ <strong>foo: String</strong></li>
	<li>Scala can use Java classes and convert between them if need be.</li>
	<li>
<pre class="lang:java decode:true ">def countOccurencesJava(input:String) = {
    import scala.collection.JavaConversions.mapAsScalaMap
    val in = new Scanner(input)
    var count: scala.collection.mutable.Map[String,Int] = new java.util.TreeMap[String, Int]()
    while (in.hasNext()) {
      val key = in.next()
      count = count + (key -&gt; (count.getOrElse(key, 0) + 1))
    }
    count
  }</pre>
</li>
	<li>Class fields in Scala are autogenerated from theÂ <em>primary constructor.Â </em>Depending on the type of field declared, getters and/or setters will be generated.</li>
	<li><em>Auxiliary constructorsÂ </em>take the form <strong>this</strong> see below:</li>
	<li>
<pre class="lang:java decode:true">class Car(val manufacturer:String, val model_name:String){
  private var model_year:Int = -1
  var license_plate:String = ""

  def this(man:String, mod:String, mod_year:Int){
    this(man, mod)
    model_year = mod_year
  }

  def this(man:String, mod:String, plate:String){
    this(man, mod)
    license_plate = plate
  }

  def this(man:String, mod:String, mod_year:Int, plate:String){
    this(man, mod, mod_year)
    model_year = mod_year
    license_plate = plate
  }

  def mod_year = model_year
}</pre>
</li>
	<li>Methods default to public, as do fields. Adding private in front of fields will make them available to class (like in Java), you can make it instance-only by usingÂ <em>private[this]</em>.</li>
	<li>You can define methods without () and they will only be callable viaÂ <em>class.methodÂ </em>and notÂ <em>class.method()</em></li>
	<li>Tuple access is 1-indexed, and you useÂ <em>_&lt;index&gt;</em> to do it.</li>
	<li>Multiple args in a sequence are denoted by _*.</li>
	<li>Typical for loop functionality <em>(init; test; update)</em>Â as it exists in Java and C++ is not present in Scala. For loops look like this:</li>
	<li>
<pre class="lang:java decode:true">for (i &lt;- 0 until n){
    arr += random.nextInt(n)
}
// until is exclusive, to is inclusive

// backwards
for (i &lt;- n to 0 by -1){
    println(i)
}</pre>
</li>
	<li>Scaladoc is your friend.</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>208</wp:post_id>
		<wp:post_date>2013-02-18 18:17:18</wp:post_date>
		<wp:post_date_gmt>2013-02-18 23:17:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>scala-observations-part-1</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="scala"><![CDATA[Scala]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Scala Observations - Part 2</title>
		<link>http://kpetrovich.com/2013/02/scala-observations-part-2/</link>
		<pubDate>Wed, 20 Feb 2013 23:01:50 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://kpetrovich.com/?p=224</guid>
		<description></description>
		<content:encoded><![CDATA[Spent most of this afternoon learning about the following topics in Scala: Objects, Packages, Inheritance, I/O, Traits, and Operators. Here are some of my notes.
<ul>
	<li><span style="line-height: 13px;"><strong>Objects</strong>
</span>
<ul>
	<li>There are no static methods for classes in Scala, instead, create a companion object of the same name to define static methods.</li>
	<li>Common usage includes defining apply() in order to make object creation easier...like Array(1, 2, 3) is actually a call to the Array object's apply method which builds a new Array object with the values listed.</li>
	<li>Objects can extend classes or traits.</li>
	<li>Scala doesn't have enumerated types, but you can make an object that extendsÂ <em>Enumeration</em> in order to produce enumerations.</li>
	<li>
<pre class="lang:java decode:true ">object MutualFund extends Enumeration {
  type MutualFund = Value
  val MoneyMarket, Equity, PyramidScheme = Value
}</pre>
&nbsp;</li>
</ul>
</li>
	<li><strong>Packaging</strong>
<ul>
	<li>Fulfills the same purpose as in Java, but more flexible.</li>
	<li>Can declare packages anywhere anytime, and they aren't tied to directory structure.</li>
	<li>You can access all enclosing packages' scope.</li>
	<li>If you want to restrict scope or you don't need enclosing packages' scope you can used chained package declarations likeÂ <em>org.example.foo</em>Â in which you won't have access toÂ <em>exampleÂ </em>orÂ <em>org</em> scope.</li>
	<li>If all code in the same file belongs to the same package, you can declare the package at the top, otherwise you have to nest them with brackets.</li>
	<li>If you want to have default package wide values or functions available, you can create aÂ <em>package object.</em></li>
	<li>
<pre class="lang:default decode:true ">package object banks {
  val failureRate = .99
}

package banks {
  class Bank {
    var fail = failureRate // Constant from package
  }
}</pre>
&nbsp;</li>
	<li>Control visibility by using qualifiers onÂ <em>private</em>, likeÂ <em>private[banks].</em></li>
	<li>Import wildcard is _ (* is a valid method name in Scala)</li>
	<li>Imports can be anywhere, not just top of the file. Things imported within blocks will only last until the end of that block.Â <em>Nice</em>.</li>
</ul>
</li>
	<li><strong>Inheritance</strong>
<ul>
	<li>Extends works similarly to how it does in Java.</li>
	<li>Any overridesÂ <strong>require</strong> theÂ <em>override</em> modifier, unless you are overriding an abstract method.</li>
	<li>KeywordÂ <em>super</em> works similarly to Java.</li>
	<li><em>Protected</em> modifier gives visibility to subclasses.</li>
	<li>
<pre class="lang:java decode:true ">class BankAccount (initialBalance: Double) {
  protected var balance = initialBalance
  def deposit(amount: Double) = { balance += amount; balance }
  def withdraw(amount: Double) = { balance -= amount; balance }
}

class CheckingAccount(initialBalance: Double) extends BankAccount(initialBalance) {
  override def deposit(amount: Double) = { balance += amount - 1; balance }
  override def withdraw(amount: Double) = { balance -= amount + 1; balance }
}</pre>
&nbsp;</li>
	<li>Only the primary constructor can call the superclass constructor, and this is done simply in the class declaration.</li>
	<li>
<pre class="lang:java decode:true ">// CheckingAccount passes intialBalance to BankAccount constructor
class CheckingAccount(initialBalance: Double) extends BankAccount(initialBalance) {
  override def deposit(amount: Double) = { balance += amount - 1; balance }
  override def withdraw(amount: Double) = { balance -= amount + 1; balance }
}</pre>
&nbsp;</li>
	<li>You can extend Java classes in Scala</li>
	<li>Can't overrideÂ <em>vars</em> unless abstract, butÂ <em>valsÂ </em>can be overwritten by otherÂ <em>vals; defÂ </em>can be overridden by anotherÂ <em>defÂ </em>or by aÂ <em>valÂ </em>if the originalÂ <em>def</em> wasÂ parameter-less.</li>
	<li>
<pre class="lang:java decode:true ">abstract class Spaceship {
  val test:Int
  var test2:String
}

class Firefly extends Spaceship {
  val test = 23
  var test2 = "woah"
}</pre>
&nbsp;</li>
	<li>Abstract classes denoted byÂ <em>abstract</em> modifier, to make abstract methods just omit the body, for abstract fields just don't set them to anything.</li>
	<li>You can't count on the value of aÂ <em>val</em> in the body of a constructor, because the superclass is constructed before the subclass is.</li>
	<li>== will call theÂ <em>equals</em> method</li>
	<li>When definingÂ <em>equals</em> methods, the parameter of the other object should be of typeÂ <em>Any</em><em>.</em></li>
	<li><em>AnyRef </em>in ScalaÂ is the equivalent ofÂ <em>Object</em> in Java.</li>
</ul>
</li>
	<li><b>I/O</b>
<ul>
	<li><em>Scala.io.SourceÂ </em>holds many I/O operations.</li>
	<li><em>Source.fromFile()Â </em>opens files,Â <em>Source.fromURL, Source.fromString</em>Â also exist.</li>
	<li>Once you've opened a Source, you can easily turn it into a string withÂ <em>mkString,Â </em>an array withÂ <em>toArray</em>, a buffer withÂ <em>toBuffer...</em>by default it is an iterator.</li>
	<li>You need to rely on Java for some file operations such as reading binaries or traversing directories.</li>
	<li><em>scala.sys.process</em> provides easy ways to interact with the shell. After importing, putting a ! after a string will run the contents of the string in the shell.</li>
	<li>Regex objects can be constructed by using theÂ <em>r</em> method on Strings. If you use raw strings [triple quoted] you can avoid double backslash nastiness.</li>
</ul>
</li>
	<li><strong>Traits</strong>
<ul>
	<li>Kind of like Java interfaces, except when they aren't.</li>
	<li>You can implement multiple traits.</li>
	<li>Traits can just be abstract (like interfaces) or they can contain default implementations of methods or default values (unlike interfaces).</li>
	<li>You can <strong>mixin</strong> traits on a whim using theÂ <em>with</em> keyword upon object creation</li>
	<li>
<pre class="lang:java decode:true ">// Pretend Log1 and Log2 have a method log.
val bar1 = new Foo with Log1
val bar2 = new Foo with Log2

bar1.log // calls Log1's log
bar2.log // calls Log2's log</pre>
&nbsp;</li>
	<li>Order of traits matters because a trait that usesÂ <em>super</em> will refer to the next one in the trait hierarchy!</li>
	<li>If you extend a trait by a class, anything implementing that trait will now have that class as a superclass. A consequence of this is that if you are implementing a trait in a class that inherits from another class that isn't a subclass of the trait's class, you will get an error.Â <em>Phew.</em></li>
	<li>You can restrict what classes can implement what traits with type declarations.</li>
</ul>
</li>
	<li><strong>Operators</strong>
<ul>
	<li>Basically...You can make your own operators!</li>
</ul>
</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>224</wp:post_id>
		<wp:post_date>2013-02-20 18:01:50</wp:post_date>
		<wp:post_date_gmt>2013-02-20 23:01:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>scala-observations-part-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="scala"><![CDATA[Scala]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Scala Observations - Part 3</title>
		<link>http://kpetrovich.com/2013/02/scala-observations-part-3/</link>
		<pubDate>Fri, 22 Feb 2013 23:04:26 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://kpetrovich.com/?p=226</guid>
		<description></description>
		<content:encoded><![CDATA[The final few sections: High-Order Functions, Collections, Pattern Matching, Annotations, Types, and Implicits. Covered in a whirlwind afternoon, here's some takeaways.

&nbsp;
<ol>
	<li><span style="line-height: 13px;"><strong>High-Order Functions</strong>
</span></li>
</ol>
<ul>
<ul>
	<li>Functions are first-order citizens in Scala, can be passed around in variables and parameters.</li>
	<li>Anonymous functions are available.</li>
	<li>
<pre class="lang:java decode:true" title="Anonymous Function">// Useful for placing in parameters. Can be assigned to a value.
(x : Int) =&gt; 3 + x</pre>
&nbsp;</li>
	<li>Functions can take function parameters.</li>
	<li>
<pre class="lang:java decode:true " title="Functions as Parameters">def foo(bar: (Int) =&gt; Int) = bar(3)</pre>
&nbsp;</li>
	<li>...And functions can return functions.</li>
	<li>
<pre class="lang:java decode:true " title="Functions returning functions">def foo(bar: String) = (x :String) =&gt; bar + " " + x</pre>
&nbsp;</li>
	<li>Scala will infer types when passing anonymous functions around.</li>
	<li>Useful higher order functions in scala include <em>map, reduceLeft/Right, sortWith...</em></li>
	<li>Scala supports closures.</li>
	<li>Scala supports currying which allows for multiple parameters.</li>
	<li>You can create control abstractions, which appear like language keywords.</li>
</ul>
	<li><strong>Sets</strong>
<ul>
	<li>Scala has a big collections library that has iterable sequences, sets, and maps.</li>
	<li>There are immutable and mutable versions of both.</li>
	<li>Scala lists have a head and tail, the tail of a non-empty list is another list.</li>
	<li>Mapping over collections can be very helpful. There's other variations of this like reducing, folding, and scanning.</li>
	<li>After applying the function to the first two elements, reducing applies a binary function to the result of that first call and the next elements, then the result of that and the next element, and so on.</li>
	<li>Fold is like reduce that takes an initial value.</li>
	<li>Scanning will give you a collection of all intermediate results.</li>
	<li>There are threadsafe collection classes provided.</li>
	<li>UsingÂ <em>.par</em> on a collection will perform the next chained call concurrently. This works on for loops.</li>
	<li>Streams are lazily implemented collections.</li>
</ul>
</li>
	<li><strong>Pattern Matching</strong>
<ul>
	<li>No switch statements, useÂ <em>match</em>. It also doesn't fall through.</li>
	<li>Cases can include guards, which can be any Boolean condition.</li>
	<li>You can match all sorts of things. Types, arrays, lists, tuples...</li>
	<li>You can use pattern matching in variable declarations for functions that return more than one thing.</li>
	<li></li>
</ul>
</li>
	<li><strong>Annotations</strong>
<ul>
	<li>You can annotate classes, methods, fields, local variables, params, expressions, types...you can apply multiple annotations.</li>
	<li>Annotations can be used for some compilation optimizations, like tail recursion.</li>
	<li><em>@throws</em> annotations are required if you will be calling Scala methods from Java code, or else the exception will not be caught.</li>
</ul>
</li>
	<li><strong>Types</strong>
<ul>
	<li>If you are looking to chain methods on a subclass, useÂ <em>this.type</em>Â as the return type on a method, so that the type returned matches the type of the object that called it. This is the singleton type.</li>
	<li>You also use theÂ <em>Object.type</em> notation when you want to pass in a singleton type to a method.</li>
	<li>Nested classes belong to the object in which they are nested, so the nested class <em>Thingy</em>Â nested in the <em>f</em><em>oo </em>instance of the <i>BeepBoop</i>Â object is of a different <strong>type</strong> than theÂ <em>Thingy</em> class nested in theÂ <em>bar</em> instance of the sameÂ <em>BeepBoop</em> object.</li>
	<li>If you want to allow for loose interpretation of the nested class types, you can use aÂ <strong>type projection.Â </strong>For the above example, if you want to allowÂ <em>Thingy</em> objects of <strong>anyÂ </strong><em>BeepBoop</em>Â object to be valid, useÂ <em>BeepBoop#Thingy</em> as a type declaration.</li>
	<li>Paths must be stable except for the final type. They cannot be variables. To be stable, it must specify a single, definitive scope.</li>
	<li>Type alias declared with theÂ <em>type</em>Â modifier, must be in a nested class or object, cannot be declared at the top level of a file.</li>
	<li>
<pre class="lang:java decode:true ">type Foo = scala.collection.mutable.HashMap[String, Int]</pre>
&nbsp;</li>
	<li>Structural typing achieved by putting something like this instead of a type declaration. Will make Scala check for the existence of methods.</li>
	<li>
<pre class="lang:java decode:true ">def fooBar(foo: { def bar(str: String): Any }) {
  println foo.bar("hello")
}</pre>
&nbsp;</li>
	<li>Compound types declared usingÂ <em>with</em> much like when inheriting from multiple traits. Value must belong to all types in order to be valid.</li>
	<li>You can use infix types if you want to confuse other developers. (I don't think this adds much value personally.)</li>
	<li>
<pre class="lang:java decode:true ">//String Map Int instead of Map[String, Int]</pre>
&nbsp;</li>
	<li>Existential types are used for compatibility w/ Java wildcards. It is a type declaration followed by aÂ <em>forSome {...}</em> where the braces have type and val declarations.</li>
	<li>Scala types!
<ul>
	<li>Class or Trait -Â <em>class C, trait C</em></li>
	<li>Tuple -Â <em>(T1, T2...Tn)</em></li>
	<li>Function -Â <em>(T1, T2...Tn) =&gt; T</em></li>
	<li>Annotated -Â <em>T @A</em></li>
	<li>Parameterized -Â <em>A[T1, T2...Tn]</em></li>
	<li>Singleton -Â <em>value.type</em></li>
	<li>Type Projection -Â <em>O#I</em></li>
	<li>Compound -Â <em>T1 with T2 with ... with Tn { declarations }</em></li>
	<li>Infix -Â <em>T1 A T2</em></li>
	<li>Existential -Â <em>T forSome { type and val declarations }</em></li>
</ul>
</li>
	<li>Self types are used to control which mixins can be used with a class.</li>
	<li>
<pre class="lang:default decode:true ">// MyTrait can only be mixed in with subclasses of Foo, ensuring that bar
// is always available.
trait MyTrait {
 this: Foo =&gt;
   def bar() { //do something }
}</pre>
&nbsp;</li>
	<li>To Â use dependency interjection, supply a trait for each service component that describes dependencies with self types, traits describing service interface, abstract val to be instantiated with the service, and optionally implementations of the interface. Then have a component configuration object which instantiates the services the way you want, and extend off that.</li>
	<li>Abstract types are declared using <i>type Foo</i> and not specifying a type. It's expected that subclasses will define the type. You can also make abstract types in the type parameter. Typically type parameters are used if you want control over types on instantiation.</li>
</ul>
</li>
	<li><strong>Implicits</strong>
<ul>
	<li>You can define your own conversions by makingÂ <strong>implicit conversion functions</strong>. These are functions with one parameter and theÂ <em>implicit</em> keyword that will automatically be applied to convert values.</li>
	<li>
<pre class="lang:java decode:true ">implicit def int2Fraction(n: Int) = Fraction(n, 1)

// Now this will evaluate because integer is automatically converted
val foo = 3 * Fraction(4, 5)</pre>
&nbsp;</li>
	<li>If you want to extend classes, you can use implicits to convert to a custom class. For example, if I wanted to addÂ <em>read</em> toÂ <em>java.io.File</em> I could define aÂ <strong>RichFile</strong> class that has that method, and then make an implicit function to Â convertÂ <strong>FileÂ </strong>toÂ <strong>RichFileÂ </strong>whenÂ <em>read</em> is called.</li>
	<li>You have to import the implicits so that they can be used. It may be good to use local imports to restrict the scope of the implicit to the block you are working within.</li>
	<li>Implicit conversions triggered in 3 situations
<ul>
	<li>Type of expression differs from expected type</li>
	<li>Object accesses a nonexistent member</li>
	<li>Object invokes method with args that don't match parameters.</li>
</ul>
</li>
	<li>ImplicitsÂ <em>won't</em> be called in the following situations
<ul>
	<li>The code compiles without it</li>
	<li>Multiple conversions needed</li>
	<li>Ambiguous conversion implicits are present</li>
</ul>
</li>
	<li>Implicit parameters will cause the compiler to look for default values to supply</li>
	<li>Implicit parameters are pulled from the following locations
<ul>
	<li>All<em> valÂ </em>andÂ <em>def</em> of the desired type within the current scope</li>
	<li>In a companion object of the type that is associated with the desired type.</li>
</ul>
</li>
	<li>There can only be one implicitÂ <em>val</em>Â for any type.</li>
	<li>You can even make implicit conversions using an implicit parameter by putting an implicit conversion function in a parameter.</li>
	<li>If you have a object that has context bound generics, implicits will be used to convert the parameters as needed. So if you have an implicit parameter in a method that requires <em>Bar[</em><em>T]</em>Â and <em>TÂ </em>isÂ <em>Foo</em>,<em>Â </em>it will look for a <em>Bar</em><em>[Foo]</em>Â and construct a value for the methods that need it.<i>
</i></li>
	<li>Type constraints can be declared an implicit parameter.
<ul>
	<li>T =:= U - T equals U<em></em></li>
	<li>T &lt;:&lt; U - T is a subtype of U</li>
	<li>T &lt;%&lt; U - T can be converted to U</li>
</ul>
</li>
	<li>You use those to makeÂ <strong>evidence</strong> objects, which will implicitly convert generics in order to access methods even though the compiler doesn't know what the generic is.</li>
</ul>
</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>226</wp:post_id>
		<wp:post_date>2013-02-22 18:04:26</wp:post_date>
		<wp:post_date_gmt>2013-02-22 23:04:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>scala-observations-part-3</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="scala"><![CDATA[Scala]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Playing with Play</title>
		<link>http://kpetrovich.com/2013/02/playing-with-play/</link>
		<pubDate>Mon, 25 Feb 2013 23:05:35 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://kpetrovich.com/?p=235</guid>
		<description></description>
		<content:encoded><![CDATA[Did some very very shallow dabbling with the Play web framework today. Working through the introductory tutorial, here are some differences and similarities I found with web frameworks I've used in the past (Rails, Django).
<h3>Similarities</h3>
I felt pretty comfortable navigating the Play application architecture. It's about the same as any other MVC framework. You have your models in a models package, controllers in a controllers package, Â and views in a views package and they all work mostly like you'd expect. Then you have the conf directory where you have your application settings, routing, and migrations (or "evolutions" as Play calls them).Â Making routes is about as easy as it is in Rails with a simpleÂ <em>METHOD PATTERN ACTIONÂ </em>syntax. When running a server, changes to files will be picked up and compiled so you don't need to keep restarting.
<h3>Differences</h3>
Models in Play are a little weird to me. You define the structure of the model with a case class...but then you have to define a companion object for all the retrieval methods. I'm pampered by using the Django ORM and ActiveRecord, so having to write SQL again to retrieve all objects is funky. I'm willing to bet someone has automated this in some way already, it seems a little ridiculous to write some of this boilerplate.

In the views, you have to declare the types of the values you are passing in...which makes sense because Scala is strongly typed and all.

Migrations are written using SQL.

&nbsp;

&nbsp;

&nbsp;

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>235</wp:post_id>
		<wp:post_date>2013-02-25 18:05:35</wp:post_date>
		<wp:post_date_gmt>2013-02-25 23:05:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>playing-with-play</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Hadoop WebHDFS &quot;Hello World&quot;</title>
		<link>http://kpetrovich.com/2013/02/hadoop-webhdfs-hello-world/</link>
		<pubDate>Wed, 27 Feb 2013 21:49:45 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://kpetrovich.com/?p=239</guid>
		<description></description>
		<content:encoded><![CDATA[Spent most of the day installing VMs and Hadoop, but I got to play around a little it with Hadoop's web API. We're looking to use the Hadoop WebHDFS APIs to allow the client to push data into the Hadoop cluster. Here's some stuff you'll have to do to enable WebHDFS. ThisÂ <em>assumes</em> you already have a NameNode up and running. If not, see <a title="Single Node Setup" href="http://hadoop.apache.org/docs/stable/single_node_setup.html">this document</a>Â for single-node setup.

First, you have to enable WebHDFS in theÂ <em>conf/hdfs-site.xmlÂ </em>file in your Hadoop installation.
<pre class="lang:xhtml decode:true" title="conf/hdfs-site.xml">&lt;property&gt;
  &lt;name&gt;dfs.webhdfs.enabled&lt;/name&gt;
  &lt;value&gt;true&lt;/value&gt;
&lt;/property&gt;</pre>
Once you've done that, you can make requests to the NameNodes you have running.

<a title="Hadoop WebHDFS documentation" href="http://hadoop.apache.org/docs/stable/webhdfs.html" target="_blank">The Hadoop documentation</a>Â is great and describes all operations you can perform and their respective endpoints and parameters. Today I just played with creating and writing to a file.

You first use the endpoint with the operationÂ <strong>CREATE</strong> and you'll get a redirect. In this example, test.txt is the file, doop is the hostname, and 50070 is the port.
<pre class="lang:sh decode:true">curl -i -X PUT "http://doop:50070/webhdfs/v1/test.txt?op=CREATE&amp;overwrite=true"</pre>
Returns something like this...
<pre class="lang:default decode:true">HTTP/1.1 307 TEMPORARY_REDIRECT
Content-Type: application/octet-stream
Location: http://doop:50075/webhdfs/v1/test.txt?op=CREATE&amp;overwrite=true
Content-Length: 0
Server: Jetty(6.1.26)</pre>
You take the location and put it into another PUT request, this time including a file.
<pre class="lang:sh decode:true">curl -i -X PUT -T test.txt "http://doop:50075/webhdfs/v1/test.txt?op=CREATE&amp;overwrite=true"</pre>
If it's successful, Â you should see a<strong> 201 Created</strong> response. At the moment however, I am receiving a <strong>403 Forbidden</strong>...I <em>suspect</em>Â this is just because on the server I do not have permission to write files on the default user. You can authenticate (described in the docs) to set your user, I may try that, or I may just choose a path that is write-able for everyone. I guess I'll find out soon enough!

EDIT: Sure enough, you just have to specify a user who has write access to that DFS. Since I'm just testing things out, I'm not using authentication, so I added the parameter <em>user.name=&lt;name&gt;Â </em>and replaced name with the user I used to create the node,Â and the file was created.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>239</wp:post_id>
		<wp:post_date>2013-02-27 16:49:45</wp:post_date>
		<wp:post_date_gmt>2013-02-27 21:49:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hadoop-webhdfs-hello-world</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="admin"><![CDATA[Admin]]></category>
		<category domain="category" nicename="hadoop"><![CDATA[Hadoop]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>79</wp:comment_id>
			<wp:comment_author><![CDATA[Dou]]></wp:comment_author>
			<wp:comment_author_email>douxinsoco@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>58.213.43.116</wp:comment_author_IP>
			<wp:comment_date>2013-09-26 11:25:07</wp:comment_date>
			<wp:comment_date_gmt>2013-09-26 15:25:07</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[so you did a CREATE request

and as it behaves as usual, it request redirected to a new URL

I noticed that the redirected URL's netloc is 'doop'

I guess it's your datanode's hostname

I do the same as you, but my redirected URL's netloc is 'localhost', it makes me so confused

Do you mind share your config to me ? or you know how to fix it ?

BTW, my env is a small cluster including 1 namenode and 2 datanodes]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1380209107.954547882080078125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_as_submitted</wp:meta_key>
				<wp:meta_value><![CDATA[a:75:{s:15:"comment_post_ID";i:239;s:14:"comment_author";s:3:"Dou";s:20:"comment_author_email";s:20:"douxinsoco@gmail.com";s:18:"comment_author_url";s:0:"";s:15:"comment_content";s:426:"so you did a CREATE request

and as it behaves as usual, it request redirected to a new URL

I noticed that the redirected URL's netloc is 'doop'

I guess it's your datanode's hostname

I do the same as you, but my redirected URL's netloc is 'localhost', it makes me so confused

Do you mind share your config to me ? or you know how to fix it ?

BTW, my env is a small cluster including 1 namenode and 2 datanodes";s:12:"comment_type";s:0:"";s:14:"comment_parent";i:0;s:7:"user_ID";i:0;s:7:"user_ip";s:13:"58.213.43.116";s:10:"user_agent";s:68:"Mozilla/5.0 (X11; Linux x86_64; rv:23.0) Gecko/20100101 Firefox/23.0";s:8:"referrer";s:57:"http://kpetrovich.com/2013/02/hadoop-webhdfs-hello-world/";s:4:"blog";s:21:"http://kpetrovich.com";s:9:"blog_lang";s:5:"en_US";s:12:"blog_charset";s:5:"UTF-8";s:9:"permalink";s:57:"http://kpetrovich.com/2013/02/hadoop-webhdfs-hello-world/";s:21:"akismet_comment_nonce";s:6:"passed";s:11:"POST_author";s:3:"Dou";s:10:"POST_email";s:20:"douxinsoco@gmail.com";s:8:"POST_url";s:0:"";s:12:"POST_comment";s:426:"so you did a CREATE request

and as it behaves as usual, it request redirected to a new URL

I noticed that the redirected URL's netloc is 'doop'

I guess it's your datanode's hostname

I do the same as you, but my redirected URL's netloc is 'localhost', it makes me so confused

Do you mind share your config to me ? or you know how to fix it ?

BTW, my env is a small cluster including 1 namenode and 2 datanodes";s:11:"POST_submit";s:12:"Post Comment";s:20:"POST_comment_post_ID";s:3:"239";s:19:"POST_comment_parent";s:1:"0";s:26:"POST_akismet_comment_nonce";s:10:"d297d3b3db";s:15:"SERVER_SOFTWARE";s:6:"Apache";s:11:"REQUEST_URI";s:21:"/wp-comments-post.php";s:4:"PATH";s:28:"/usr/local/bin:/usr/bin:/bin";s:16:"REDIRECT_HANDLER";s:9:"php52-cgi";s:15:"REDIRECT_STATUS";s:3:"200";s:16:"PHP_INI_SCAN_DIR";s:26:"/home/pstoica/webapps/kyle";s:10:"SCRIPT_URL";s:21:"/wp-comments-post.php";s:10:"SCRIPT_URI";s:42:"http://kpetrovich.com/wp-comments-post.php";s:5:"HTTPS";s:3:"off";s:9:"HTTP_HOST";s:14:"kpetrovich.com";s:21:"HTTP_X_FORWARDED_HOST";s:14:"kpetrovich.com";s:23:"HTTP_X_FORWARDED_SERVER";s:14:"kpetrovich.com";s:20:"HTTP_X_FORWARDED_FOR";s:13:"58.213.43.116";s:26:"HTTP_FORWARDED_REQUEST_URI";s:21:"/wp-comments-post.php";s:27:"HTTP_HTTP_X_FORWARDED_PROTO";s:4:"http";s:10:"HTTP_HTTPS";s:3:"off";s:22:"HTTP_X_FORWARDED_PROTO";s:4:"http";s:20:"HTTP_X_FORWARDED_SSL";s:3:"off";s:15:"HTTP_CONNECTION";s:5:"close";s:14:"CONTENT_LENGTH";s:3:"645";s:15:"HTTP_USER_AGENT";s:68:"Mozilla/5.0 (X11; Linux x86_64; rv:23.0) Gecko/20100101 Firefox/23.0";s:11:"HTTP_ACCEPT";s:63:"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8";s:20:"HTTP_ACCEPT_LANGUAGE";s:14:"en-US,en;q=0.5";s:20:"HTTP_ACCEPT_ENCODING";s:13:"gzip, deflate";s:12:"HTTP_REFERER";s:57:"http://kpetrovich.com/2013/02/hadoop-webhdfs-hello-world/";s:11:"HTTP_COOKIE";s:0:"";s:12:"CONTENT_TYPE";s:33:"application/x-www-form-urlencoded";s:16:"SERVER_SIGNATURE";s:0:"";s:11:"SERVER_NAME";s:14:"kpetrovich.com";s:11:"SERVER_ADDR";s:9:"127.0.0.1";s:11:"SERVER_PORT";s:2:"80";s:11:"REMOTE_ADDR";s:13:"58.213.43.116";s:13:"DOCUMENT_ROOT";s:26:"/home/pstoica/webapps/kyle";s:12:"SERVER_ADMIN";s:18:"[no address given]";s:15:"SCRIPT_FILENAME";s:47:"/home/pstoica/webapps/kyle/wp-comments-post.php";s:11:"REMOTE_PORT";s:5:"36828";s:12:"REDIRECT_URL";s:21:"/wp-comments-post.php";s:17:"GATEWAY_INTERFACE";s:7:"CGI/1.1";s:15:"SERVER_PROTOCOL";s:8:"HTTP/1.0";s:14:"REQUEST_METHOD";s:4:"POST";s:12:"QUERY_STRING";s:0:"";s:11:"SCRIPT_NAME";s:21:"/wp-comments-post.php";s:20:"ORIG_SCRIPT_FILENAME";s:23:"/home/php-cgi/php52.cgi";s:14:"ORIG_PATH_INFO";s:21:"/wp-comments-post.php";s:20:"ORIG_PATH_TRANSLATED";s:47:"/home/pstoica/webapps/kyle/wp-comments-post.php";s:16:"ORIG_SCRIPT_NAME";s:18:"/cgi-bin/php52.cgi";s:8:"PHP_SELF";s:21:"/wp-comments-post.php";s:12:"REQUEST_TIME";s:10:"1380209107";s:4:"argv";s:0:"";s:4:"argc";s:1:"0";s:25:"comment_post_modified_gmt";s:19:"2013-03-01 18:46:11";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Wso2 API Manager and Hadoop WebHDFS Grief</title>
		<link>http://kpetrovich.com/2013/03/wso2-api-manager-and-hadoop-webhdfs-grief/</link>
		<pubDate>Fri, 01 Mar 2013 20:04:42 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://kpetrovich.com/?p=247</guid>
		<description></description>
		<content:encoded><![CDATA[After working out how the Hadoop WebHDFS endpoints worked, it was time to hook it up to Wso2 API Manager, an API gateway we will be using for access control and authentication. Hit some snags right out of the gate, because Hadoop relies on redirects for it's file operations, and API Manager doesn't seem to like redirects, returning a "Resource not found" instead of following them.

Again, the basic Hadoop flow is, you query the name node for a file (or to create it), and you're returned a redirect to a datanode which actually has the file. Then you query that datanode and it'll get coughed up (or created). We're going to have to work out a way to get API manager to follow those redirects instead of backing out if we want to use it.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>247</wp:post_id>
		<wp:post_date>2013-03-01 15:04:42</wp:post_date>
		<wp:post_date_gmt>2013-03-01 20:04:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>wso2-api-manager-and-hadoop-webhdfs-grief</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="hadoop"><![CDATA[Hadoop]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Using XSLT Rewrites in WSO2 API Manager</title>
		<link>http://kpetrovich.com/2013/03/using-xslt-rewrites-in-wso2-api-manager/</link>
		<pubDate>Wed, 06 Mar 2013 21:41:53 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://kpetrovich.com/?p=252</guid>
		<description></description>
		<content:encoded><![CDATA[Since we're having some issues with Hadoop redirects and the API manager, we're looking into performing some simple transformations to make them play nice. We couldn't find much information on how to do this with the API manager, but interestingly enough, the API manager is based on the WSO2 Enterprise Service Bus. We know now that the ESB has the capability to run In and Out sequences (including transformations) in order toÂ accommodateÂ say, turning SOAP into REST and vice versa. We think we might be able to use this to solve our little redirect problem with some clever XSLT rewrites.

The following is a little tutorial to get the <a title="Tutorial" href="http://wso2.org/library/knowledge-base/2011/03/handling-httpget-request-invoking-external-web-service-wso2-esb">"Hello World" XSLT tutorial for the ESB</a> working with the API Manager instead. I borrow heavily from this tutorial, it's about 90% the same.<a href="http://wso2.org/library/knowledge-base/2011/03/handling-httpget-request-invoking-external-web-service-wso2-esb">
</a>

To get started with the "Hello World" of making the API manager perform transformations, begin by running the test SimpleStockQuoteService provided by the ESB. Here are the steps to do this:
<ol>
	<li>Download the ESB from WSO2</li>
	<li>Build the SimpleStockQuoteService located in theÂ <em>samples/axis2Server</em>/<em>src/SimpleStockQuoteService</em> with ant</li>
	<li>RunÂ <em>axis2server.sh</em> inÂ <em>samples/axis2Server</em></li>
</ol>
This is a SOAP service that we will be querying via REST through the API manager. We're just using this for an example.

Next you'll want to create two XLST files, to make things easier, just name themÂ <strong>request_transform.xslt</strong>,Â <strong>response_transform.xslt.Â </strong>Here are their contents.
<pre class="lang:xhtml decode:true" title="request_transform.xslt">&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0"&gt;
&lt;xsl:param name="symbol"/&gt;
&lt;xsl:template match="/"&gt;
    &lt;m0:getQuote xmlns:m0="http://services.samples"&gt;
        &lt;m0:request&gt;
            &lt;m0:symbol&gt;&lt;xsl:value-of select="$symbol"/&gt;&lt;/m0:symbol&gt;
        &lt;/m0:request&gt;
    &lt;/m0:getQuote&gt;
&lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;</pre>
&nbsp;
<pre class="lang:xhtml decode:true" title="response_transform.xslt">&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0"&gt;
&lt;xsl:param name="symbol"/&gt;
&lt;xsl:param name="high"/&gt;
&lt;xsl:param name="low"/&gt;
&lt;xsl:template match="/"&gt;
    &lt;m0:getQuote xmlns:m0="http://services.samples"&gt;
        &lt;m0:response&gt;
            &lt;m0:company&gt;&lt;xsl:value-of select="$symbol"/&gt;&lt;/m0:company&gt;
    &lt;m0:high&gt;&lt;xsl:value-of select="$high"/&gt;&lt;/m0:high&gt;
    &lt;m0:low&gt;&lt;xsl:value-of select="$low"/&gt;&lt;/m0:low&gt;
        &lt;/m0:response&gt;
    &lt;/m0:getQuote&gt;
&lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;</pre>
We will reference these files in our configuration. For now just put them in the WSO2 API Manager subfolder ofÂ <em>repository/samples/resources/transform</em>Â (Note: there's nothing special about this directory, in fact you'll have to create it. This was just a carry over from the ESB tutorial. Where the API Manager looks for them is defined in the configuration by yourself)<em>
</em>

Now that's out of the way. Start WSO2 and create an API just like you normally would, pointing it atÂ <em>http://localhost:9000/services/SimpleStockQuoteService</em>. This is the example SOAP endpoint we started running earlier. Now go to Carbon (defaultÂ <em>https://localhost:9443/carbon).Â </em>Navigate toÂ <em>Source View</em> underÂ <em>Service Bus</em>. We're going to edit the configuration XML directly. I think it's interesting to note that Carbon seems to have the UI to edit in/out sequences without going through the configuration, but it's broken!

Now find the API we just created within the XML schema. It should look likeÂ <em>&lt;api name="&lt;user&gt;--&lt;nameofapi&gt;....</em> Once you've found it, edit out theÂ <em>&lt;inSequence&gt;Â </em>andÂ <em>&lt;outSequence</em>&gt; containers, and put in the following XML.
<pre class="lang:default decode:true" title="inSequence">&lt;enrich&gt;
  &lt;source type="inline" clone="true"&gt;
    &lt;a xmlns=""/&gt;
  &lt;/source&gt;
  &lt;target type="body" action="child"/&gt;
&lt;/enrich&gt;
&lt;log level="full"/&gt;
  &lt;property name="company" expression="substring-after(get-property('To'),'company/')"/&gt;
  &lt;xslt key="xslt-transform-request"&gt;
    &lt;property name="symbol" expression="get-property('company')"/&gt;
  &lt;/xslt&gt;
  &lt;header name="Action" value="urn:getQuote"/&gt;
&lt;log level="full"/&gt;
&lt;send&gt;
  &lt;endpoint name="ep1"&gt;
    &lt;address uri="http://localhost:9000/services/SimpleStockQuoteService" format="soap11"/&gt;
  &lt;/endpoint&gt;
&lt;/send&gt;</pre>
&nbsp;
<pre class="lang:default decode:true" title="outSequence">&lt;property xmlns:ax21="http://services.samples/xsd" xmlns:ns="http://services.samples" name="response_symbol" expression="//ns:return/ax21:symbol/child::text()"/&gt;
&lt;property xmlns:ax21="http://services.samples/xsd" xmlns:ns="http://services.samples" name="response_high" expression="//ns:return/ax21:high/child::text()"/&gt;
&lt;property xmlns:ax21="http://services.samples/xsd" xmlns:ns="http://services.samples" name="response_low" expression="//ns:return/ax21:low/child::text()"/&gt;
&lt;log level="custom"&gt;
  &lt;property name="response symbol:" expression="get-property('response_symbol')"/&gt;
  &lt;property name="response high  :" expression="get-property('response_high')"/&gt;
  &lt;property name="response low   :" expression="get-property('response_low')"/&gt;
&lt;/log&gt;
&lt;xslt key="xslt-transform-response"&gt;
  &lt;property name="symbol" expression="get-property('response_symbol')"/&gt;
  &lt;property name="high" expression="get-property('response_high')"/&gt;
  &lt;property name="low" expression="get-property('response_low')"/&gt;
&lt;/xslt&gt;
&lt;send/&gt;</pre>
Here all we really did was take the config from the ESB tutorial and drop it in for our API instead. Don't forget to add the following in your config as well (I added it at the beginning, not inside any container).
<pre class="lang:default decode:true" title="config">&lt;localEntry key="xslt-transform-request" src="file:repository/samples/resources/transform/request_transform.xslt"/&gt;
&lt;localEntry key="xslt-transform-response" src="file:repository/samples/resources/transform/response_transform.xslt"/&gt;</pre>
Now when you query your API atÂ <em>http://localhost:8280/&lt;whatever you named it&gt;/&lt;version&gt;/company/IBM,Â </em>you should get a response like this
<pre class="lang:default decode:true" title="response">&lt;m0:getQuote xmlns:m0="http://services.samples"&gt;
  &lt;m0:response&gt;
    &lt;m0:company&gt;IBM&lt;/m0:company&gt;
    &lt;m0:high&gt;91.25734854343622&lt;/m0:high&gt;
    &lt;m0:low&gt;-88.76604951249396&lt;/m0:low&gt;
  &lt;/m0:response&gt;
&lt;/m0:getQuote&gt;</pre>
Notice how SOAP isn't returned...and it wasn't provided...for the SOAP webservice.

Now how do we think this will solve the Hadoop redirect problem? Well the main problem is that redirects are being returned with hostnames that WSO2 can't recognize. If we can rewrite these to proper IPs, maybe we can circumvent this issue. Also, the CREATED webhdfs:// location, although not a redirect, also throws the API manager for a loop. With an XSLT transform, maybe we can just toss this out (we don't need it for our purposes, a confirmation will do...).

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>252</wp:post_id>
		<wp:post_date>2013-03-06 16:41:53</wp:post_date>
		<wp:post_date_gmt>2013-03-06 21:41:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>using-xslt-rewrites-in-wso2-api-manager</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="admin"><![CDATA[Admin]]></category>
		<category domain="post_tag" nicename="wso2-api-manager"><![CDATA[WSO2 API Manager]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Accessing Hadoop Data in R, Setup and Configuration</title>
		<link>http://kpetrovich.com/2013/03/accessing-hadoop-data-in-r-setup-and-configuration/</link>
		<pubDate>Wed, 13 Mar 2013 21:28:42 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://kpetrovich.com/?p=258</guid>
		<description></description>
		<content:encoded><![CDATA[So I think I've got this figured out. I'm running a 2VM Ubuntu Server 12.04.2 "cluster". Â Here's how I setup R and Rstudio to allow an end user to run data processing in their browser. This tutorial assumes you are installing Rstudio on the master Namenode server, which has a working Hadoop install.Â <strong>You will need to install R and (I think) RMR2 for every node in the cluster however, so they can process the jobs you create.</strong>

<strong>Installing R</strong>

You will need to add the <a title="CRAN Mirror List" href="http://cran.r-project.org/mirrors.html">CRAN</a>Â repository to your sources. Obviously this will vary depending on what system you are using. I'm using Ubuntu.
<pre class="lang:sh decode:true " title="/etc/apt/sources.list"># Append me to /etc/apt/sources.list (or the equivalent)
deb http://&lt;cran mirror location&gt;/bin/linux/ubuntu &lt;ubuntuversionname&gt;/</pre>
And of course, update your package listings and install R.
<pre class="lang:sh decode:true " title="Installing R">sudo apt-get update
sudo apt-get install r-base</pre>
<strong>Installing RMR2 Dependencies</strong>

Next we need to install dependencies for RMR2. There are a handful. Start up R with sudo to install them site wide.
<pre class="lang:sh decode:true ">sudo R</pre>
Then in the R terminal use the following.
<pre class="lang:default decode:true ">install.packages( c('Rcpp', 'RJSONIO', 'digest', 'functional', 'stringr', 'plyr', 'reshape2'))</pre>
This will take a bit and then you can quit R withÂ <em>q()</em>

<strong>Installing RMR2</strong><span style="line-height: 13px;">
</span>

Download RMR2 from RevolutionAnalytics <a title="RMR2" href="https://github.com/RevolutionAnalytics/rmr2">repository on Github</a>. Using the 2.1.0 tag, but be sure to change it to whatever RMR2 version you will be using.
<pre class="lang:sh decode:true" title="Download RMR, Extract, Install">wget --no-check-certificate https://github.com/RevolutionaryAnalytics/rmr2/archive/tag-2.1.0.tar.gz
tar -xzf tag-2.1.0.tar.gz
cd rmr-tag-2.1.0/build
sudo R CMD INSTALL rmr2_2.1.0.tar.gz</pre>
Make sure that worked by loading up R and usingÂ <em>library(rmr2).Â </em>It should import without error.

<strong>Install Rstudio Server</strong>

This is very easy. If you added the CRAN repo from before, just...
<pre class="lang:default decode:true" title="RStudio Server Install">sudo apt-get install rstudio-server</pre>
<a title="RStudio Server" href="http://www.rstudio.com/ide/docs/server/getting_started">More about RStudio Server installation</a>

You will know it's working if you head to <em>&lt;server_address&gt;:8787Â </em>and you can login with your system user credentials. However, there is one last step before RMR2 will work nicely with Hadoop.

<b>Edit Renviron to work with Hadoop</b>

Now we just need to make sure RStudio has access to the environment variables needed to use RMR. You will need <strong>HADOOP_CMD</strong> and <strong>HADOOP_STREAMING</strong>. Go to your &lt;<em>R_INSTALL_DIR&gt;/Renviron.site</em> and add the following:
<pre class="lang:default decode:true">HADOOP_CMD=&lt;PATH_TO_HADOOP_COMMAND&gt;
HADOOP_STREAMING=&lt;PATH_TO_HADOOP_CONTRIB_STREAMING_JAR&gt;</pre>
Now if you go to Rstudio atÂ <em>&lt;server_address&gt;:8787,Â </em>login, andÂ you should be able to run
<pre class="lang:r decode:true ">Sys.getenv("HADOOP_CMD")</pre>
And get back the paths you defined.

<strong>See if it all worked!</strong>

Point your browser to Rstudio, login, and import the RMR2 library.
<pre class="lang:r decode:true ">library("rmr2")</pre>
Try assigning the contents of a DFS file to a variable...
<pre class="lang:r decode:true " title="Using RMR">df = from.dfs('filepath')</pre>
It may take a while, but on success you should see the contents stored into variable df.

<strong>Just the start...</strong>

What you do from here is up to you. I recommend consulting the following tutorial to start writing map reduce functions via RMR.

<a title="RMR Tutorial" href="https://github.com/RevolutionAnalytics/rmr2/blob/master/docs/tutorial.md">RMR Tutorial</a>

Or consult the <a title="RHadoop Wiki" href="https://github.com/RevolutionAnalytics/RHadoop/wiki">RHadoop Wiki</a>Â for more detailed information.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>258</wp:post_id>
		<wp:post_date>2013-03-13 17:28:42</wp:post_date>
		<wp:post_date_gmt>2013-03-13 21:28:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>accessing-hadoop-data-in-r-setup-and-configuration</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="hadoop"><![CDATA[Hadoop]]></category>
		<category domain="post_tag" nicename="hadoop"><![CDATA[Hadoop]]></category>
		<category domain="category" nicename="r"><![CDATA[R]]></category>
		<category domain="post_tag" nicename="r-2"><![CDATA[r]]></category>
		<category domain="post_tag" nicename="rstudio-server"><![CDATA[rstudio server]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Fun with Flume, and Map Reduce for the Unacquainted</title>
		<link>http://kpetrovich.com/2013/03/fun-with-flume-and-map-reduce-for-the-unacquainted/</link>
		<pubDate>Mon, 25 Mar 2013 22:26:19 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://kpetrovich.com/?p=265</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>Flume Hello World</strong>

Just did a little demo with <a title="Flume" href="http://flume.apache.org/">Flume</a> today. Using the same 2VM cluster Hadoop setup from earlier, I built Flume on my namenode and was easily able to put data into HDFS in a fault-tolerant manner.

[caption id="" align="alignnone" width="620"]<img alt="" src="http://flume.apache.org/_images/UserGuide_image00.png" width="620" height="221" /> Flume at it's most simple level.[/caption]

Flume, in an oversimplified nutshell, is a service that can collect large amounts of data and store them in HDFS in a fault tolerant manner. You define various <em>sources</em> which will take in data,Â <em>channels</em> which are buffers of sorts that can hold data and move it to other locations from sources, andÂ <em>sinks</em> which can insert into HDFS, write to a console, HBase, IRC, etc. You can route data from multiple channels to consolidate, route to multiple locations, define backup routes...it's all really cool. Not too hard to get a hello world example up too, I had it writing to HDFS with this simple config:
<pre class="lang:sh decode:true" title="Flume HDFS "># Channel definition
agent1.channels.c1.type = memory
agent1.channels.c1.capacity = 1000
agent1.channels.c1.transactionCapacity = 100

# Netcat source definition
agent1.sources.r1.type = netcat
agent1.sources.r1.bind = 0.0.0.0
agent1.sources.r1.port = 44444
# Link source to channel
agent1.sources.r1.channels = c1

# HDFS Sink
agent1.sinks.k1.type = hdfs
agent1.sinks.k1.hdfs.path = hdfs://&lt;pathtoyournamenode&gt;/flume/test
# Link sink to channel
agent1.sinks.k1.channel = c1

# Components are all defined, just activate them on agent1
agent1.channels = c1
agent1.sources = r1
agent1.sinks = k1</pre>
And starting up the agent (from the Flume directory)...
<pre class="lang:sh decode:true">bin/flume-ng agent --conf-file conf/&lt;conf_file&gt; --name agent1 -Dflume.root.logger=INFO,console</pre>
Now by telneting to localhost:44444 and typing some input, files were created in HDFS containing what I input. Obviously there's much more you can do with Flume, but this suffices for "hello world".

<strong>Map Reduce for Dummies</strong>

I've been working a lot with the system admin side of things recently. Setting up VMs, poring through config files, all that jazz. I had a fuzzy understanding of the map/reduce paradigm (to be fair I still do), but I've been spending some time brushing up and I feel I'm getting a grip.

It's defined by two functions, operating on key value pairs, allowing for massively parallel computation.

The <em>map</em>Â function is processing your input key/value pairs, into intermediate key/value pairs for consumption by your <em>reduceÂ </em>function, which typically is some sort of aggregation function on all values with the same intermediate key.

How the Hadoop MR works is nicely documented <a href="http://wiki.apache.org/hadoop/HadoopMapReduce">in their wiki page</a>. Here's a TL;DR summary though.
<ol>
	<li>Input split into smaller chunks, if needed. Splitting can occur anywhere. Distributed amongst waiting map tasks.</li>
	<li>Input formatted into K/V pairs. (KeyÂ <em>andÂ </em>value not necessarily needing to be meaningful)</li>
	<li>Mapper function as defined by the user is applied.</li>
	<li>Mapper output given to Reduce, Reduce tasks copy files where needed to reduce network I/O.</li>
	<li>Pairs are sorted so that keys are contiguous</li>
	<li>Reduce applied to K/V pairs.</li>
</ol>
Also a good read is the <a title="Google Map Reduce" href="http://static.googleusercontent.com/external_content/untrusted_dlcp/research.google.com/en/us/archive/mapreduce-osdi04.pdf">Google paper on map reduce.</a>

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>265</wp:post_id>
		<wp:post_date>2013-03-25 18:26:19</wp:post_date>
		<wp:post_date_gmt>2013-03-25 22:26:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>fun-with-flume-and-map-reduce-for-the-unacquainted</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="admin"><![CDATA[Admin]]></category>
		<category domain="category" nicename="hadoop"><![CDATA[Hadoop]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>77</wp:comment_id>
			<wp:comment_author><![CDATA[Saloni]]></wp:comment_author>
			<wp:comment_author_email>saloni.jain024@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>117.199.214.80</wp:comment_author_IP>
			<wp:comment_date>2013-07-07 14:50:44</wp:comment_date>
			<wp:comment_date_gmt>2013-07-07 18:50:44</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi...

The information is really helpful...Please help me in case of HBASE sink Â configuration and writing regex and put values in different Â columns.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1373223044.1928958892822265625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1378750952.88689708709716796875;s:7:"message";s:44:"admin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Plantr Pitch Video</title>
		<link>http://kpetrovich.com/2013/03/plantr-pitch-video/</link>
		<pubDate>Thu, 28 Mar 2013 05:43:26 +0000</pubDate>
		<dc:creator>admin</dc:creator>
		<guid isPermaLink="false">http://kpetrovich.com/?p=267</guid>
		<description></description>
		<content:encoded><![CDATA[This semester I've been taking a mobile apps class (CS-4261-A, CS-8803-MAS), which has been completely awesome. Well, lectures aside, which are mostly guest lectures...but other than that the class is completely project basedÂ and I love that because it means I get to actually make stuff!

The class has a bit of anÂ entrepreneurialÂ tinge. You have to come up with an idea, business plan, pitch video...it's almost like we're making our own little company. After much goading from me, my group is making a mobile gardening app calledÂ <em>Plantr</em> (I'm involved in the community garden here at Tech so I was pretty passionate about this idea haha). <em>Plantr</em>Â intends to combine real time data from embedded sensors to provide alerts and recommendations for community gardens.Â We're entering the final stages of our "beta" release, and we have a nifty pitch video courtesy of my group mate Casey Mann. Check it out!

<iframe width="560" height="315" src="http://www.youtube.com/embed/nDzP_NWsAXQ" frameborder="0" allowfullscreen></iframe>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>267</wp:post_id>
		<wp:post_date>2013-03-28 01:43:26</wp:post_date>
		<wp:post_date_gmt>2013-03-28 05:43:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>plantr-pitch-video</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="arduino"><![CDATA[arduino]]></category>
		<category domain="category" nicename="diy"><![CDATA[DIY]]></category>
		<category domain="post_tag" nicename="garduino"><![CDATA[garduino]]></category>
		<category domain="post_tag" nicename="plantr"><![CDATA[plantr]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
